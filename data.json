{
    "project": {
        "name": "API reference",
        "description": "Documentation for the Canvace Game Engine",
        "version": "1.0.0",
        "url": "http://www.canvace.com/"
    },
    "files": {
        "src/Ajax.js": {
            "name": "src/Ajax.js",
            "modules": {},
            "classes": {
                "Canvace.Ajax": 1,
                "Canvace.Ajax.Request": 1
            },
            "fors": {
                "Canvace.Ajax": 1
            },
            "namespaces": {}
        },
        "src/Animator.js": {
            "name": "src/Animator.js",
            "modules": {},
            "classes": {
                "Canvace.Animator": 1,
                "Canvace.Animator.Easing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/AppCache.js": {
            "name": "src/AppCache.js",
            "modules": {},
            "classes": {
                "Canvace.AppCache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Astar.js": {
            "name": "src/Astar.js",
            "modules": {},
            "classes": {
                "Canvace.Astar": 1,
                "Canvace.Astar.Node": 1
            },
            "fors": {
                "Canvace.Astar": 1
            },
            "namespaces": {}
        },
        "src/Audio.js": {
            "name": "src/Audio.js",
            "modules": {},
            "classes": {
                "Canvace.Audio": 1,
                "Canvace.Audio.SourceNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Buckets.js": {
            "name": "src/Buckets.js",
            "modules": {},
            "classes": {
                "Canvace.Buckets": 1,
                "Canvace.Buckets.Entity": 1
            },
            "fors": {
                "Canvace.Buckets": 1
            },
            "namespaces": {}
        },
        "src/DebugEffect.js": {
            "name": "src/DebugEffect.js",
            "modules": {},
            "classes": {
                "Canvace.DebugEffect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Heap.js": {
            "name": "src/Heap.js",
            "modules": {},
            "classes": {
                "Canvace.Heap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Keyboard.js": {
            "name": "src/Keyboard.js",
            "modules": {},
            "classes": {
                "Canvace.Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/List.js": {
            "name": "src/List.js",
            "modules": {},
            "classes": {
                "Canvace.List": 1,
                "Canvace.List.Accessor": 1
            },
            "fors": {
                "Canvace.List": 1
            },
            "namespaces": {}
        },
        "src/Loader.js": {
            "name": "src/Loader.js",
            "modules": {},
            "classes": {
                "Canvace.Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Matrix.js": {
            "name": "src/Matrix.js",
            "modules": {},
            "classes": {
                "Canvace.Matrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Mobile.js": {
            "name": "src/Mobile.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Canvace": 1
            },
            "namespaces": {}
        },
        "src/Module.js": {
            "name": "src/Module.js",
            "modules": {
                "Canvace": 1
            },
            "classes": {},
            "fors": {
                "Canvace": 1
            },
            "namespaces": {}
        },
        "src/Mouse.js": {
            "name": "src/Mouse.js",
            "modules": {},
            "classes": {
                "Canvace.Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/MultiSet.js": {
            "name": "src/MultiSet.js",
            "modules": {},
            "classes": {
                "Canvace.MultiSet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ParametricStateMachine.js": {
            "name": "src/ParametricStateMachine.js",
            "modules": {},
            "classes": {
                "Canvace.ParametricStateMachine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Polyfill.js": {
            "name": "src/Polyfill.js",
            "modules": {},
            "classes": {
                "Canvace.Polyfill": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/RenderLoop.js": {
            "name": "src/RenderLoop.js",
            "modules": {},
            "classes": {
                "Canvace.RenderLoop": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Renderer.js": {
            "name": "src/Renderer.js",
            "modules": {},
            "classes": {
                "Canvace.Renderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/RumbleEffect.js": {
            "name": "src/RumbleEffect.js",
            "modules": {},
            "classes": {
                "Canvace.RumbleEffect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Stage.js": {
            "name": "src/Stage.js",
            "modules": {},
            "classes": {
                "Canvace.Stage": 1,
                "Canvace.Stage.Entity": 1,
                "Canvace.Stage.Instance": 1,
                "Canvace.Stage.Range": 1
            },
            "fors": {
                "Canvace.Stage": 1
            },
            "namespaces": {}
        },
        "src/StageRenderer.js": {
            "name": "src/StageRenderer.js",
            "modules": {},
            "classes": {
                "Canvace.StageRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/StateMachine.js": {
            "name": "src/StateMachine.js",
            "modules": {},
            "classes": {
                "Canvace.StateMachine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/TileMap.js": {
            "name": "src/TileMap.js",
            "modules": {},
            "classes": {
                "Canvace.TileMap": 1,
                "Canvace.TileMap.Tile": 1
            },
            "fors": {
                "Canvace.TileMap": 1
            },
            "namespaces": {}
        },
        "src/Timing.js": {
            "name": "src/Timing.js",
            "modules": {},
            "classes": {
                "Canvace.Timing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/View.js": {
            "name": "src/View.js",
            "modules": {},
            "classes": {
                "Canvace.View": 1,
                "Canvace.View.Synchronizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Visibility.js": {
            "name": "src/Visibility.js",
            "modules": {},
            "classes": {
                "Canvace.Visibility": 1
            },
            "fors": {
                "Canvace": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "Canvace": {
            "name": "Canvace",
            "submodules": {},
            "classes": {
                "Canvace.Ajax": 1,
                "Canvace.Ajax.Request": 1,
                "Canvace.Animator": 1,
                "Canvace.Animator.Easing": 1,
                "Canvace.AppCache": 1,
                "Canvace.Astar": 1,
                "Canvace.Astar.Node": 1,
                "Canvace.Audio": 1,
                "Canvace.Audio.SourceNode": 1,
                "Canvace.Buckets": 1,
                "Canvace.Buckets.Entity": 1,
                "Canvace.DebugEffect": 1,
                "Canvace.Heap": 1,
                "Canvace.Keyboard": 1,
                "Canvace.List": 1,
                "Canvace.List.Accessor": 1,
                "Canvace.Loader": 1,
                "Canvace.Matrix": 1,
                "Canvace": 1,
                "Canvace.Mouse": 1,
                "Canvace.MultiSet": 1,
                "Canvace.ParametricStateMachine": 1,
                "Canvace.Polyfill": 1,
                "Canvace.RenderLoop": 1,
                "Canvace.Renderer": 1,
                "Canvace.RumbleEffect": 1,
                "Canvace.Stage": 1,
                "Canvace.Stage.Entity": 1,
                "Canvace.Stage.Instance": 1,
                "Canvace.Stage.Range": 1,
                "Canvace.StageRenderer": 1,
                "Canvace.StateMachine": 1,
                "Canvace.TileMap": 1,
                "Canvace.TileMap.Tile": 1,
                "Canvace.Timing": 1,
                "Canvace.View": 1,
                "Canvace.View.Synchronizer": 1,
                "Canvace.Visibility": 1
            },
            "fors": {
                "Canvace": 1,
                "Canvace.Stage": 1,
                "Canvace.TileMap": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/Visibility.js",
            "line": 21,
            "description": "The main namespace object of Canvace's Javascript client library is named\n`Canvace`. Every Canvace class must be accessed from that object.\n\nThe `Canvace` name also represents function that can be used to retrieve\nDOM elements from a CSS selector string.",
            "example": [
                "\n\t(function ($) {\n\t\t// Inside this anonymous function, \"Canvace\" is aliased as \"$\"\n\t\t$('#play-button').addEventListener('click', function () {\n\t\t\twindow.alert('You clicked on the \"Play\" button!');\n\t\t}, false);\n\t})(Canvace);"
            ],
            "params": [
                {
                    "name": "param",
                    "description": "A `String` representing a valid CSS selector,\nor a DOM element.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `null` if `param` is a `String` which corresponds\nto no element in the document, or returns the (first) corresponding element\notherwise. If `param` is already a DOM element, it's returned as is.\nIf `param` is completely missing, it returns `undefined`.",
                "type": "Mixed"
            }
        }
    },
    "classes": {
        "Canvace.Ajax": {
            "name": "Canvace.Ajax",
            "shortname": "Canvace.Ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Ajax.js",
            "line": 21,
            "description": "This class provides a simple interface to perform AJAX requests.",
            "static": 1,
            "example": [
                "\n\tCanvace.Ajax.getJSON('/data/stage1.json', function (stageData) {\n\t\t// ...\n\t});"
            ]
        },
        "Canvace.Ajax.Request": {
            "name": "Canvace.Ajax.Request",
            "shortname": "Canvace.Ajax.Request",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Ajax.js",
            "line": 32,
            "description": "Represents an open AJAX request.\n\nYou cannot instantiate this class directly: you can obtain a new instance\nby using the {{#crossLink \"Canvace.Ajax/get\"}}{{/crossLink}},\n{{#crossLink \"Canvace.Ajax/post\"}}{{/crossLink}},\n{{#crossLink \"Canvace.Ajax/put\"}}{{/crossLink}},\n{{#crossLink \"Canvace.Ajax/_delete\"}}{{/crossLink}} and\n{{#crossLink \"Canvace.Ajax/getJSON\"}}{{/crossLink}} methods.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "A dictionary containing the options to use for\nthe request.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "method",
                            "description": "Indicates the HTTP method to use.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "Indicates the URL of the requested resource.\n\nDo not include a hash part, as a `?` and URL-encoded data will be\ndirectly appended in case of `GET` requests with data.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Provides custom parameters to pass to the\nserver. They will be URL-encoded and appended to the URL in case of a GET\nrequest and sent in the request body in all other cases.\n\nThe specified object may contain nested objects and arrays at any depth.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "Allows to specify HTTP request headers\nto send.\nEach key of the specified dictionary is a header name, while each value\nis the corresponding value. For example, to specify `Content-Type` and\n`Accept` headers:\n\n\t{\n\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t'Accept': 'application/json'\n\t}",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "Indicates the way the browser should\ninterpret the resource contents. This can be an empty string, `'text'`,\n`'json'`, `'document'`, `'blob'` or `'arraybuffer'`.\n\nDefaults to an empty string, which means the same as `'text'`.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "async",
                            "description": "Indicates whether the request is\nasynchronous (`true`) or blocking (`false`). Defaults to `true`.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "user",
                            "description": "The user name to use when\nauthentication is required. Defaults to an empty string.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "password",
                            "description": "The user password to use when\nauthentication is required. Defaults to an empty string.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "''"
                        },
                        {
                            "name": "load",
                            "description": "The callback function to invoke when\nthe loading is complete. See the `onLoad` method for details.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "The callback function to invoke when\nthe loading aborts with an error. See the `onError` method for details.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\tCanvace.Ajax.post({\n\t\turl: '/threads',\n\t\tdata: {\n\t\t\tsubject: 'Great news',\n\t\t\tmessage: 'Lorem ipsum dolor sit blah blah'\n\t\t},\n\t\ttype: 'json',\n\t\tload: function (response) {\n\t\t\tif (response.success) {\n\t\t\t\twindow.location = '/threads/' + response.id;\n\t\t\t} else {\n\t\t\t\talert(response.message);\n\t\t\t}\n\t\t},\n\t\terror: function (statusCode, statusText) {\n\t\t\talert(statusText);\n\t\t}\n\t});"
            ]
        },
        "Canvace.Animator": {
            "name": "Canvace.Animator",
            "shortname": "Canvace.Animator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Animator.js",
            "line": 21,
            "description": "Computes interpolated animations for entity instances.\n\nAn `Animator` object is actually a `tick`-like function that may be used in a\n{{#crossLink \"Canvace.RenderLoop\"}}RenderLoop{{/crossLink}} and provides\nmethods to animate entity instances.\n\nAn interpolated animation is performed by updating an instance's position,\nvelocity, uniform velocity or acceleration at every tick; all of these\nobjects have `i`, `j` and `k` fields and you can choose what fields must be\ninterpolated. You also have to define the target values for each and the\noverall duration (in milliseconds) of the animation.\n\nWhen using an `Animator` as the `tick` callback of a\n{{#crossLink \"Canvace.RenderLoop\"}}RenderLoop{{/crossLink}} you can still\nspecify your own additional `tick` callback by either passing it to the\n`Animator` constructor or\n{{#crossLink \"Canvace.Animator/tick\"}}Animator.tick{{/crossLink}} method.\nThe specified `tick` callback is executed at each tick _after_ the update\nprocedures for the current animations.\n\nNote that the `Animator` does not invoke the\n{{#crossLink \"Canvace.Stage.Instance/update\"}}Instance.update{{/crossLink}}\nmethod of the animated instances, so, for animations to have effect, either\nphysics must be enabled on the animated entities or you must invoke\n{{#crossLink \"Canvace.Stage.Instance/update\"}}Instance.update{{/crossLink}}\nmanually (you can do that in your `tick` callback function).",
            "extends": "Function",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tick",
                    "description": "An optional user-defined `tick` callback function.\nIt is invoked at each tick using this\n{{#crossLink \"Canvace.Animator\"}}Animator{{/crossLink}} object as `this`.\n\nYou can also specify this later using the\n{{#crossLink \"Canvace.Animator/tick\"}}{{/crossLink}} method.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar animator = new Canvace.Animator(function () {\n\t\t// Custom tick function. Here we can update the gameplay. We do that\n\t\t// here because we can't specify a tick function to the renderloop - we\n\t\t// already specifying the animator.\n\t\t// Sample gameplay code follows.\n\t\t\n\t\tenemies.forEach(function (enemy) {\n\t\t\tif (enemy.isNearTo(character)) {\n\t\t\t\tenemy.attack(character);\n\t\t\t}\n\t\t});\n\t});\n\t\n\tvar mainLoop = new Canvace.RenderLoop(stage, null, loader, animator);\n\tmainLoop.run();"
            ]
        },
        "Canvace.Animator.Easing": {
            "name": "Canvace.Animator.Easing",
            "shortname": "Canvace.Animator.Easing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Animator.js",
            "line": 406,
            "description": "Static object holding various predefined easing functions ready to use with\nthe `interpolateXxx` methods of\n{{#crossLink \"Canvace.Animator\"}}{{/crossLink}}.",
            "static": 1
        },
        "Canvace.AppCache": {
            "name": "Canvace.AppCache",
            "shortname": "Canvace.AppCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/AppCache.js",
            "line": 21,
            "description": "Gives access to the `window.applicationCache` object, if supported.",
            "static": 1
        },
        "Canvace.Astar": {
            "name": "Canvace.Astar",
            "shortname": "Canvace.Astar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Astar.js",
            "line": 21,
            "description": "Provides a generic epsilon-admissible implementation of the A* pathfinding\nalgorithm.\n\n`Astar` objects provide a\n{{#crossLink \"Canvace.Astar/findPath\"}}{{/crossLink}} method that finds an\nadmissible path between two nodes of a graph.\n\nGiven that any path between two nodes has a cost greater than zero, the\nalgorithm tries to find either an optimal one (one of those with the least\ncost) or an admissible one (one whose cost is at most `1 + epsilon` times the\noptimal cost).\n\nThe `epsilon` parameter must be greater than zero and is optional: it is\nassumed to be zero when not specified. Specifying a non-zero epsilon value\nwill construct an object that can perform significantly faster and still\nyield almost optimal paths.\n\nRefer to the documentation of the\n{{#crossLink \"Canvace.Astar/findPath\"}}{{/crossLink}} method for more\ninformation about specifying the graph.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "epsilon",
                    "description": "The optional epsilon parameter, defaults to zero.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// Elaborate a random labyrinth represented by a boolean matrix.\n\t// True means there is a wall, false means the cell is walkable.\n\tvar matrix = [];\n\tfor (var i = 0; i < 100; i++) {\n\t\tvar row = [];\n\t\tfor (var j = 0; j < 100; j++) {\n\t\t\trow[j].push(Math.random() < 0.5);\n\t\t}\n\t\tmatrix.push(row);\n\t}\n\tconsole.dir(matrix);\n\t\n\t// Create a path finder\n\tvar pathFinder = new Canvace.Astar();\n\t\n\t// Implement a node of the graph.\n\t// Heuristics are taxicab distances from cell (99, 99).\n\tfunction Node(i, j) {\n\t\tthis.id = '(' + i + ', ' + j + ')';\n\t\tthis.heuristic = 198 - i - j;\n\t\tthis.distance = function () {\n\t\t\treturn 1;\n\t\t};\n\t\tthis.neighbors = {};\n\t\tif ((j > 0) && !matrix[i][j - 1]) {\n\t\t\tthis.neighbors.left = function () {\n\t\t\t\treturn new Node(i, j - 1);\n\t\t\t};\n\t\t}\n\t\tif ((j < 99) && !matrix[i][j + 1]) {\n\t\t\tthis.neighbors.right = function () {\n\t\t\t\treturn new Node(i, j + 1);\n\t\t\t};\n\t\t}\n\t\tif ((i > 0) && !matrix[i - 1][j]) {\n\t\t\tthis.neighbors.up = function () {\n\t\t\t\treturn new Node(i - 1, j);\n\t\t\t};\n\t\t}\n\t\tif ((i < 99) && !matrix[i + 1][j]) {\n\t\t\tthis.neighbors.down = function () {\n\t\t\t\treturn new Node(i + 1, j);\n\t\t\t};\n\t\t}\n\t}\n\t\n\t// find the path from (0, 0) to (99, 99)\n\tconsole.dir(pathFinder.findPath(new Node(0, 0)));"
            ]
        },
        "Canvace.Astar.Node": {
            "name": "Canvace.Astar.Node",
            "shortname": "Canvace.Astar.Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Astar.js",
            "line": 103,
            "description": "This is not an actual inner class, it just documents what graph nodes\nmust implement in order to be suitable for the\n{{#crossLink \"Canvace.Astar/findPath\"}}{{/crossLink}} method.\n\nObjects providing these properties and methods are usable as graph nodes\nand may be passed as arguments to\n{{#crossLink \"Canvace.Astar/findPath\"}}{{/crossLink}}.",
            "static": 1
        },
        "Canvace.Audio": {
            "name": "Canvace.Audio",
            "shortname": "Canvace.Audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Audio.js",
            "line": 21,
            "description": "This class provides the needed functionalities to load audio resources and\ncontrol them. It uses WebAudio where available, and will default to\n`HTMLAudioElement` otherwise.",
            "is_constructor": 1
        },
        "Canvace.Audio.SourceNode": {
            "name": "Canvace.Audio.SourceNode",
            "shortname": "Canvace.Audio.SourceNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Audio.js",
            "line": 97,
            "description": "This class represents a sound resource that the browser is capable\nof playing.\n\nIf the browser supports WebAudio, this class wraps around an\n`AudioSourceNode`; if it doesn't, this class wraps around an\n`HTMLAudioElement`.\n\nYou cannot instantiate this class directly: you can obtain a new\ninstance by using the\n{{#crossLink \"Canvace.Audio/load\"}}Audio.load{{/crossLink}},\n{{#crossLink \"Canvace.Loader/getSound\"}}Loader.getSound{{/crossLink}}\nor\n{{#crossLink \"Canvace.Loader/playSound\"}}Loader.playSound{{/crossLink}}\nmethod."
        },
        "Canvace.Buckets": {
            "name": "Canvace.Buckets",
            "shortname": "Canvace.Buckets",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Buckets.js",
            "line": 21,
            "description": "This class allows for efficient rendering of graphic elements by implementing\nan algorithm that automatically discards the elements located out of the\nviewport.\n\nYou can add any tiles or entities to the buckets using the provided `addXxx`\nmethods, the {{#crossLink \"Canvace.Buckets/forEachElement\"}}{{/crossLink}}\nmethod will then enumerate only the elements in the current view.\n\nThe `Buckets` class also supports animated elements by enumerating the\ncorrect frame for each element depending on the current timestamp as per\n{{#crossLink \"Canvace.Timing/now\"}}{{/crossLink}}.\n\nBefore adding tiles and entities with the `addXxx` methods, tile and entity\ndescriptors must be registered using the provided `registerXxx` methods. This\nis required in order to support animations.\n\nYou do not usually need to use this class directly, as it is automatically\nused by the {{#crossLink \"Canvace.Stage\"}}Stage{{/crossLink}} and\n{{#crossLink \"Canvace.StageRenderer\"}}StageRenderer{{/crossLink}} classes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "view",
                    "description": "A View object used to project the graphic\nelements.",
                    "type": "Canvace.View"
                },
                {
                    "name": "data",
                    "description": "The JSON data output by the Canvace Development\nEnvironment.",
                    "type": "Object"
                }
            ]
        },
        "Canvace.Buckets.Entity": {
            "name": "Canvace.Buckets.Entity",
            "shortname": "Canvace.Buckets.Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Buckets.js",
            "line": 167,
            "description": "Represents an entity.\n\nThis class cannot be instantiated directly, instances are returned by\nthe {{#crossLink \"Canvace.Buckets/addEntity\"}}{{/crossLink}} method."
        },
        "Canvace.DebugEffect": {
            "name": "Canvace.DebugEffect",
            "shortname": "Canvace.DebugEffect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/DebugEffect.js",
            "line": 21,
            "description": "This effect draws some overlays useful for diagnostic purposes during the\npost-processing rendering stage.\n\nThe effect may be disabled and reenabled using the provided\n{{#crossLink \"Canvace.DebugEffect/disable\"}}{{/crossLink}},\n{{#crossLink \"Canvace.DebugEffect/enable\"}}{{/crossLink}} or\n{{#crossLink \"Canvace.DebugEffect/toggle\"}}{{/crossLink}} methods, and is\ninitially enabled.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage being rendered.",
                    "type": "Canvace.Stage"
                },
                {
                    "name": "options",
                    "description": "An options object specifying what overlays must be\ndrawn and their drawing style.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "drawBoundingBoxes",
                            "description": "Indicates whether\nentities' bounding boxes must be drawn. Only entities with physics enabled\nare taken into account.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "boundingBoxStyle",
                            "description": "Indicates the CSS color to\ndraw the bounding boxes.",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'red'"
                        },
                        {
                            "name": "drawVelocity",
                            "description": "Indicates whether velocity\nvectors must be drawn. Only entities with physics enabled are taken into\naccount.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "velocityStyle",
                            "description": "Indicates the CSS color to draw\nvelocity vectors.",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'red'"
                        },
                        {
                            "name": "drawUniformVelocity",
                            "description": "Indicates whether\nuniform velocity vectors must be drawn. Only entities with physics enabled\nare taken into account.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "uniformVelocityStyle",
                            "description": "Indicates the CSS color\nto draw uniform velocity vectors.",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'red'"
                        },
                        {
                            "name": "drawAcceleration",
                            "description": "Indicates whether\nacceleration vectors must be drawn. Only entities with physics enabled are\ntaken into account.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "accelerationStyle",
                            "description": "Indicates the CSS color to\ndraw acceleration vectors.",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'red'"
                        },
                        {
                            "name": "drawSolidMap",
                            "description": "When set to `true` causes solid\nblocks to be drawn over solid tiles.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "solidMapStyle",
                            "description": "Indicates the CSS color to draw\nthe solid map.",
                            "type": "Mixed",
                            "optional": true,
                            "optdefault": "'red'"
                        }
                    ]
                }
            ],
            "example": [
                "\n\tvar stage = new Canvace.Stage(data, canvas);\n\tstage.getRenderer().addEffect(new Canvace.DebugEffect(stage, {\n\t\tdrawVelocity: true,\n\t\tvelocityStyle: '#00FF00',\n\t\tdrawSolidMap: true\n\t}));"
            ]
        },
        "Canvace.Heap": {
            "name": "Canvace.Heap",
            "shortname": "Canvace.Heap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Heap.js",
            "line": 21,
            "description": "Implements a heap using standard algorithms.\n\nA heap is a data structure consisting in a complete binary tree where each\nelement is more \"extreme\" than both of its children, for a user-defined\ncomparison.\n\nA heap can be seen as a prioritized queue and can provide a significant\nperformance boost in several algorithms, particularly the A* pathfinding\nalgorithm.\n\nThis class is also used by {{#crossLink \"Canvace.Astar\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "A function used by a heap object to compare\nelements. The function is passed two arguments, the two elements to compare,\nand must return a negative number if the first element is more \"extreme\"\n(less or greater, depending on the user-defined criteria) than the second, a\npositive number if the first is less extreme than the second and zero if they\nare \"equal\".",
                    "type": "Function"
                },
                {
                    "name": "same",
                    "description": "A function used by a heap object to determine\nwhether two specified elements are exactly the same element.\n\nThe `same` function is passed two arguments, the two elements to compare, and\nreturns a boolean value indicating whether they are the same element.\n\n`compare` must return zero for two elements if `same` returns `true`, but the\nopposite is not necessarily true: `same` can return `false` even for two\nelements that are considered equal by `compare`.\n\nIf the `same` argument is not specified, the `===` operator is used.\n\nThis function is useful in cases where the same element may be represented by\ndifferent physical objects, and it is used by the\n{{#crossLink \"Canvace.Heap/contains\"}}{{/crossLink}},\n{{#crossLink \"Canvace.Heap/find\"}}{{/crossLink}} and\n{{#crossLink \"Canvace.Heap/decreaseKey\"}}{{/crossLink}} methods.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\t// create a min-heap\n\tvar heap = new Canvace.Heap(function (a, b) {\n\t\tif (a < b) {\n\t\t\treturn -1; // a is more extreme\n\t\t} else if (a > b) {\n\t\t\treturn 1;  // b is more extreme\n\t\t} else {\n\t\t\treturn 0;  // same priority\n\t\t}\n\t});"
            ]
        },
        "Canvace.Keyboard": {
            "name": "Canvace.Keyboard",
            "shortname": "Canvace.Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Keyboard.js",
            "line": 186,
            "description": "Helper class that eases cross-browser keyboard input management.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "A DOM element used to capture keyboard input.",
                    "type": "HTMLElement"
                },
                {
                    "name": "preventDefaultActions",
                    "description": "Indicates whether default actions\nmust be automatically prevented by the `Keyboard` class for handled keys.\nUnhandled keys keep their default behavior.\n\nThis argument defaults to `true`.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "Canvace.List": {
            "name": "Canvace.List",
            "shortname": "Canvace.List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/List.js",
            "line": 21,
            "description": "Implements a doubly linked list.\n\nThis can sometimes be preferrable to Javascript arrays since insertion and\nremoval operations have constant time complexity rather than linear.",
            "is_constructor": 1
        },
        "Canvace.List.Accessor": {
            "name": "Canvace.List.Accessor",
            "shortname": "Canvace.List.Accessor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/List.js",
            "line": 35,
            "description": "Provides access to list elements.\n\nThis class cannot be instantiated directly, instances are returned by\nmethods of the outer class.",
            "example": [
                "\n\tvar list = new Canvace.List();\n\tlist.addTail(1);\n\tlist.addTail(2);\n\tlist.addTail(3);\n\tfor (var a = list.getHead(); a; a = a.next()) {\n\t\talert(a.element());\n\t}"
            ]
        },
        "Canvace.Loader": {
            "name": "Canvace.Loader",
            "shortname": "Canvace.Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Loader.js",
            "line": 26,
            "description": "Helper class that eases the asynchronous loading of the stage data exported\nby the Canvace Development Environment.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "A dictionary containing the options for the loader.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "imagesPath",
                            "description": "The relative or absolute path referring\nto the directory where the images to be loaded are located.\n\nThis option gets overridden by `basePath`. If `basePath` is missing, this\noption becomes mandatory.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "soundsPath",
                            "description": "The relative or absolute path referring\nto the directory where the sounds to be loaded are located.\n\nThis option gets overridden by `basePath`. If `basePath` is missing, this\noption becomes mandatory when sound asset descriptors are passed to either\n{{#crossLink \"Canvace.Loader/loadAssets\"}}{{/crossLink}} or\n{{#crossLink \"Canvace.Loader/loadStage\"}}{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "basePath",
                            "description": "The relative or absolute path referring\nto the directory where both the images and sounds to be loaded are located.\nThis option overrides the values of `imagesPath` and `soundsPath`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "description": "A mandatory callback function to invoke\nwhen the loading of the assets completes.",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "loader",
                                    "description": "A reference to this\n{{#crossLink \"Canvace.Loader\"}}Loader{{/crossLink}} passed to the `complete`\ncallback.",
                                    "type": "Canvace.Loader"
                                },
                                {
                                    "name": "stage",
                                    "description": "A reference to an automatically\ncreated {{#crossLink \"Canvace.Stage\"}}Stage{{/crossLink}}. This is only\npassed to the `complete` callback when the\n{{#crossLink \"Canvace.Loader/loadStage\"}}{{/crossLink}} is used to load data.",
                                    "type": "Canvace.Stage"
                                }
                            ]
                        },
                        {
                            "name": "progress",
                            "description": "An optional callback function invoked as\nthe loading of the assets progresses.",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "progress",
                                    "description": "The current progress percentage\npassed to the `progress` callback and expressed as a real number in a\n`[0, 100)` range.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "error",
                            "description": "An optional callback function to invoke\nwhenever a loading error occurs.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Canvace.Matrix": {
            "name": "Canvace.Matrix",
            "shortname": "Canvace.Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Matrix.js",
            "line": 21,
            "description": "Represents a general purpose three-dimensional matrix use to store generic\ndata indexed by I, J and K coordinates. The data is stored efficiently since\nthe Matrix class greatly reduces memory footprint.\n\nThis class is used by the engine to manage tile maps and other internal\nthree-dimensional data.",
            "is_constructor": 1
        },
        "Canvace": {
            "name": "Canvace",
            "shortname": "Canvace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace"
        },
        "Canvace.Mouse": {
            "name": "Canvace.Mouse",
            "shortname": "Canvace.Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Mouse.js",
            "line": 21,
            "description": "Helper class that eases cross-browser mouse input management.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "element",
                    "description": "The HTML element that captures mouse input. This\nis usually the HTML5 canvas.",
                    "type": "HTMLElement"
                }
            ]
        },
        "Canvace.MultiSet": {
            "name": "Canvace.MultiSet",
            "shortname": "Canvace.MultiSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/MultiSet.js",
            "line": 21,
            "description": "Implements a multi-set, a set with possibly repeated elements.\n\nThis container allows insertion and removal of elements in constant time\nassuming the implementation of the underlying JavaScript engine manages in\namortizing insertion and removal of properties in objects to constant time.\n\nThe arguments you specify to the MultiSet constructor are immediately\ninserted into the container. For example:\n\n\tvar ms = new Canvace.MultiSet(1, 2, 3); // ms contains 1, 2 and 3\n\nThe previous snippet is equivalent to:\n\n\tvar ms = new Canvace.MultiSet();\n\tms.add(1);\n\tms.add(2);\n\tms.add(3);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to add initially to the `MultiSet`.",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "Canvace.ParametricStateMachine": {
            "name": "Canvace.ParametricStateMachine",
            "shortname": "Canvace.ParametricStateMachine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/ParametricStateMachine.js",
            "line": 21,
            "description": "Similarly to the `StateMachine` class, the `ParametricStateMachine` class\nallows to implement state machines with states and transitions; the main\ndifference is that the states can be parameterized.\n\nObjects of this class have one method for each specified transition. A\n`ParametricStateMachine` object is initially in the specified initial state;\ncalling one of its transition methods makes it change its state depending on\nhow transitions and states are defined.\n\nTODO\n\nNote that this class defines a `getCurrentState` method, thus the\n\"getCurrentState\" name is reserved and cannot be used as a transition name\nsince it would override the method provided by the class.\n\nFor more information about defining state machines, refer to the constructor\ndocumentation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "transitions",
                    "description": "An array of transition names.",
                    "type": "String[]"
                },
                {
                    "name": "states",
                    "description": "TODO",
                    "type": "Object"
                },
                {
                    "name": "initialState",
                    "description": "TODO",
                    "type": "Mixed"
                }
            ]
        },
        "Canvace.Polyfill": {
            "name": "Canvace.Polyfill",
            "shortname": "Canvace.Polyfill",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Polyfill.js",
            "line": 21,
            "description": "Static class which provides utility methods to eliminate the differences\nacross browsers.",
            "static": 1
        },
        "Canvace.RenderLoop": {
            "name": "Canvace.RenderLoop",
            "shortname": "Canvace.RenderLoop",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/RenderLoop.js",
            "line": 21,
            "description": "Provides a main loop implementation for the specified\n{{#crossLink \"Canvace.Stage\"}}Stage{{/crossLink}}.\n\nThe loop runs at the specified rate (expressed in iterations per second).\n\nAt each iteration, first all the entities that have physics enabled are\nticked and then a rendering is performed.\n\nThe loop is not initially running: it starts when the\n{{#crossLink \"Canvace.RenderLoop/start\"}}{{/crossLink}} method is called. It\ncan be later suspended, resumed and eventually stopped.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage to render.",
                    "type": "Canvace.Stage"
                },
                {
                    "name": "range",
                    "description": "An optional\n{{#crossLink \"Canvace.Stage.Range\"}}Stage.Range{{/crossLink}} object used to\nstep only the currently visible part of a stage, potentially resulting in\nbetter performances. If `null` is specified, the whole stage is stepped at\neach iteration of the loop.",
                    "type": "Canvace.Stage.Range"
                },
                {
                    "name": "loader",
                    "description": "A\n{{#crossLink \"Canvace.Loader\"}}Loader{{/crossLink}} object used to get the\nnecessary images to render.",
                    "type": "Canvace.Loader"
                },
                {
                    "name": "userTick",
                    "description": "An optional callback function that gets called\nat each iteration of the render loop, _after_ the stage is ticked but\n_before_ it is updated and rendered.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "synchronizeView",
                    "description": "An optional callback function that gets\ncalled at each iteration of the render loop, _after_ the stage is updated but\n_before_ it is rendered.\n\nThis second callback function is usually used to synchronize the view through\nits synchronizer (see the\n{{#crossLink \"Canvace.View.Synchronizer\"}}View.Synchronizer{{/crossLink}}\nclass), hence its name.\n\nThe function does not receive any arguments and its return value is ignored.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Canvace.Renderer": {
            "name": "Canvace.Renderer",
            "shortname": "Canvace.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Renderer.js",
            "line": 21,
            "description": "Manages the rendering process.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "An HTML5 canvas element used for the rendering\nprocess. This parameter can be either the actual `HTMLCanvasElement`, or\na selector string. In the latter case, the first matching element is used,\nand an exception is thrown if no matching element is found.",
                    "type": "Mixed"
                },
                {
                    "name": "loader",
                    "description": "a Loader object used to get the images to\nrender. The renderer assumes the `Loader.loadImages` method has already been\ncalled and only uses the `Loader.getImage` method.",
                    "type": "Canvace.Loader"
                },
                {
                    "name": "view",
                    "description": "A `View` object used to project the elements to\nrender and manage the viewport.",
                    "type": "Canvace.View"
                },
                {
                    "name": "buckets",
                    "description": "A `Buckets` object used to perform efficient\nrendering.",
                    "type": "Canvace.Buckets"
                },
                {
                    "name": "preProcess",
                    "description": "An optional callback function called by the\n`render` method right before the rendering of a frame. The function receives\none argument, the \"2d\" context object of the specified HTML5 canvas.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "postProcess",
                    "description": "An optional callback function called by the\n`render` method right after the rendering of a frame. The function receives\none argument, the \"2d\" context object of the specified HTML5 canvas.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Canvace.RumbleEffect": {
            "name": "Canvace.RumbleEffect",
            "shortname": "Canvace.RumbleEffect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/RumbleEffect.js",
            "line": 21,
            "description": "An effect that simulates rumbling by \"shaking\" the viewport. This effect\nprovides a `preProcess` method and no `postProcess` method; it works by\nmodifying the canvas's projection matrix in the pre-process stage.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "duration",
                    "description": "The duration of the effect expressed in number of\nframes (thus depending on the framerate).",
                    "type": "Number"
                },
                {
                    "name": "settings",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "period",
                            "description": "The\nnumber of frames between each shake direction change. Defaults to\n`Canvace.RumbleEffect.defaultPeriod`.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "Canvace.RumbleEffect.defaultPeriod"
                        },
                        {
                            "name": "extent",
                            "description": "The\ndisplacement (in canvas units) of the viewport in each shake direction.\nDefaults to `Canvace.RumbleEffect.defaultExtent`.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "Canvace.RumbleEffect.defaultExtent"
                        },
                        {
                            "name": "horizontal",
                            "description": "Indicates whether the viewport\nshould be shaken horizontally. Defaults to `true`.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "vertical",
                            "description": "Indicates whether the viewport\nshould be shaken vertically. Defaults to `true`.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "Canvace.Stage": {
            "name": "Canvace.Stage",
            "shortname": "Canvace.Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Stage.js",
            "line": 21,
            "description": "Wraps a Canvace stage.\n\nWhile providing the `data` object output by the Canvace Development\nEnvironment to the `Stage` constructor be aware that its contents may be\nmodified in order to implement some optimizations.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The JSON data output by the Canvace Development\nEnvironment.",
                    "type": "Object"
                },
                {
                    "name": "canvas",
                    "description": "An HTML5 canvas element used where the stage will\nbe rendered. This parameter can be either the actual `HTMLCanvasElement`, or\na selector string. In the latter case, the first matching element is used,\nand an exception is thrown if no matching element is found.",
                    "type": "Mixed"
                }
            ]
        },
        "Canvace.Stage.Entity": {
            "name": "Canvace.Stage.Entity",
            "shortname": "Canvace.Stage.Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Stage.js",
            "line": 80,
            "description": "Represents an entity (not an instance).\n\nThis class cannot be instantiated directly, instances are returned by\nvarious methods of the `Stage` class and subclasses."
        },
        "Canvace.Stage.Instance": {
            "name": "Canvace.Stage.Instance",
            "shortname": "Canvace.Stage.Instance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Stage.js",
            "line": 264,
            "description": "Represents an entity instance in the stage.\n\nThis class cannot be instantiated directly, instances can be obtained\nusing other methods such as `Canvace.Stage.forEachInstance`,\n`Canvace.Stage.getInstance` or their `Canvace.Stage.Entity` equivalents.\n\nIn every moment, an entity instance is characterized by the following\nstate:\n\t<ul>\n\t<li>a position vector,</li>\n\t<li>a velocity vector,</li>\n\t<li>a uniform velocity vector,</li>\n\t<li>an acceleration vector.</li>\n\t</ul>\n\nEach one of these vectors is a vector in a three-dimensional space and is\nthus characterized by three real components `i`, `j` and `k`.\n\nAn instance can be \"ticked\". Ticking an instance means updating its state\nbased on the following physics rules:\n\t<ul>\n\t<li>the acceleration vector is not changed,</li>\n\t<li>the uniform velocity vector is not changed,</li>\n\t<li>the velocity vector is updated by adding the acceleration\n\t\tvector,</li>\n\t<li>the position vector is updated by adding the velocity and uniform\n\t\tvelocity vectors.</li>\n\t</ul>\n\nTo tick an instance use the `Canvace.Stage.Instance.tick` method.\n\nTicking an instance, and thus updating its physics state, is not enough\nin order to update the actual position of its frames in the graphical\nrendering. Another separate operation, called \"update\", is necessary.\n\nAn instance can be updated by invoking its `update` method.\n\nYou do not usually need to invoke neither the `tick` nor the `update`\nmethod directly, as they are automatically invoked by the global\n`Canvace.Stage.tick` and `Canvace.Stage.update` methods which, in turn,\nare automatically invoked by the `RenderLoop`.\n\nBoth the `Canvace.Stage.Instance.tick` and the\n`Canvace.Stage.Instance.update` methods are invoked _only_ for the\ninstances that have physics enabled (physics can be toggled per-entity in\nthe Canvace Development Environment).\n\nThe point in having two separate operations, \"tick\" and \"update\", to do\none thing, which is moving an entity instance in the game, is that other\noperations can be accomplished between the two. These operations\ntypically consist in further physics processing, e.g. collision testing."
        },
        "Canvace.Stage.Range": {
            "name": "Canvace.Stage.Range",
            "shortname": "Canvace.Stage.Range",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Stage.js",
            "line": 1447,
            "description": "TODO",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "TODO",
                    "type": "Number"
                }
            ]
        },
        "Canvace.StageRenderer": {
            "name": "Canvace.StageRenderer",
            "shortname": "Canvace.StageRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/StageRenderer.js",
            "line": 21,
            "description": "Automates the rendering process of a Canvace stage and its initialization and\nmanages rendering effects.\n\nThis class extends `Renderer` and constructs it using the `View` and\n`Buckets` objects provided by the `Stage`.",
            "extends": "Canvace.Renderer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "stage",
                    "description": "The stage to render.",
                    "type": "Canvace.Stage"
                },
                {
                    "name": "loader",
                    "description": "A Loader object used to get the images to\nrender.",
                    "type": "Canvace.Loader"
                }
            ]
        },
        "Canvace.StateMachine": {
            "name": "Canvace.StateMachine",
            "shortname": "Canvace.StateMachine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/StateMachine.js",
            "line": 21,
            "description": "The `StateMachine` class allows to implement generic state machines with a\nfinite set of states and transitions, also called Deterministic Finite\nAutomata, or DFAs.\n\nObjects of this class have one method for each specified transition. A\n`StateMachine` object is initially in the specified initial state; calling\none of its transition methods makes it change its state depending on how\ntransitions and states are defined.\n\nThe following example defines a state machine with three states and two\npossible transitions, and indicates the target state for each starting state\nand for each transition:\n\n\tvar sm = new Canvace.StateMachine({\n\t\tstate0: {\n\t\t\ttransition1: 'state1',\n\t\t\ttransition2: 'state2'\n\t\t},\n\t\tstate1: {\n\t\t\ttransition1: 'state0',\n\t\t\ttransition2: 'state2'\n\t\t},\n\t\tstate2: {\n\t\t\ttransition1: 'state0',\n\t\t\ttransition2: 'state1'\n\t\t}\n\t}, 'state0');\n\n\tsm.transition1(); // goes into state1\n\tsm.transition2(); // goes into state2\n\tsm.transition2(); // goes into state1\n\nNote that this class defines a `getCurrentState` method, thus the\n\"getCurrentState\" name is reserved and cannot be used as a transition name\nsince it would override the method provided by the class.\n\nFor more information about defining state machines, refer to the constructor\ndocumentation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "states",
                    "description": "A map of states. Each property of this object is a\nstate name and its value is a state object.\n\nEach state object is a map of transitions: each property is a transition name\nand its value is a transition.\n\nA transition can be expressed in two possible forms: a string and a function.\nA string indicates the target state of that transition, while a function\ncontains code that is executed every time the state machine does that\ntransition. The function may or may not return a string as a return value;\nthe optionally returned string indicates the target state. If the function\nreturns anything other than a string its return value is ignored and the\ntransition is assumed to have the current state as target state, so the\nmachine's state is not changed.\n\nTransition functions may accept arguments, in which case the transition\nfunction exposed by the `StateMachine` object accepts the same number of\narguments and forwards them in the same order. This means transitions can be\nparameterized.\n\nAt the invocation of a transition function, `this` is set to the current\nstate object (the same object that was passed to the constructor in the\n`states` argument).\n\nYou do not need to specify all the possible transitions for each state when\ndefining the `states` argument: missing transitions are assumed to be strings\nspecifying the state's name, thus they do not change the machine's state.\n\nThe set of all the possible transitions is automatically determined by the\n`StateMachine` constructor by calculating the union of the transitions of all\nthe states.",
                    "type": "Object"
                },
                {
                    "name": "initialState",
                    "description": "The initial state.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar character = new Canvace.StateMachine({\n\t\tstill: {\n\t\t\twalkLeft: function () {\n\t\t\t\tdx = -0.1; // decrease speed\n\t\t\t\twaving = true;\n\t\t\t\treturn 'walkingLeft';\n\t\t\t},\n\t\t\twalkRight: function () {\n\t\t\t\tdx = 0.1;\n\t\t\t\twaving = true;\n\t\t\t\treturn 'walkingRight';\n\t\t\t}\n\t\t},\n\t\twalkingLeft: {\n\t\t\twalkRight: function () {\n\t\t\t\tdx = 0;\n\t\t\t\treturn 'walkingBoth';\n\t\t\t},\n\t\t\tstopLeft: function () {\n\t\t\t\tdx = 0;\n\t\t\t\twaving = false;\n\t\t\t\treturn 'still';\n\t\t\t}\n\t\t},\n\t\twalkingRight: {\n\t\t\twalkLeft: function () {\n\t\t\t\tdx = 0;\n\t\t\t\treturn 'walkingBoth';\n\t\t\t},\n\t\t\tstopRight: function () {\n\t\t\t\tdx = 0;\n\t\t\t\twaving = false;\n\t\t\t\treturn 'still';\n\t\t\t}\n\t\t},\n\t\twalkingBoth: {\n\t\t\tstopLeft: function () {\n\t\t\t\tdx = 0.1;\n\t\t\t\treturn 'walkingRight';\n\t\t\t},\n\t\t\tstopRight: function () {\n\t\t\t\tdx = -0.1;\n\t\t\t\treturn 'walkingLeft';\n\t\t\t}\n\t\t}\n\t}, 'still');\n\n\tvar keyboard = new Canvace.Keyboard(window);\n\tkeyboard.onKeyDown(KeyEvent.DOM_VK_LEFT, character.walkLeft);\n\tkeyboard.onKeyUp(KeyEvent.DOM_VK_LEFT, character.stopLeft);\n\tkeyboard.onKeyDown(KeyEvent.DOM_VK_RIGHT, character.walkRight);\n\tkeyboard.onKeyUp(KeyEvent.DOM_VK_RIGHT, character.stopRight);"
            ]
        },
        "Canvace.TileMap": {
            "name": "Canvace.TileMap",
            "shortname": "Canvace.TileMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/TileMap.js",
            "line": 21,
            "description": "Provides functionalities to manage a stage's tile map. You do not usually\nneed to instantiate this object directly, you can get an instance using the\n{{#crossLink \"Canvace.Stage.getTileMap\"}}Stage.getTileMap{{/crossLink}}\nmethod.\n\nThe `TileMap` constructor receives a\n{{#crossLink \"Canvace.Buckets\"}}{{/crossLink}} object and takes care of\nadding all the tiles in the map to the buckets so that they can be rendered.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The JSON object produced by the Canvace Development\nEnvironment.",
                    "type": "Object"
                },
                {
                    "name": "buckets",
                    "description": "A `Canvace.Buckets` object that is updated\nalong with the map, so that changes in the map are reflected by subsequent\nrenderings.",
                    "type": "Canvace.Buckets"
                }
            ]
        },
        "Canvace.TileMap.Tile": {
            "name": "Canvace.TileMap.Tile",
            "shortname": "Canvace.TileMap.Tile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/TileMap.js",
            "line": 74,
            "description": "This class wraps a tile descriptor."
        },
        "Canvace.Timing": {
            "name": "Canvace.Timing",
            "shortname": "Canvace.Timing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Timing.js",
            "line": 21,
            "description": "Static class which wraps around the timing APIs offered by the browser.\nWhenever possible, the methods provided by this class make use of a high\nresolution, monotonic clock.",
            "static": 1
        },
        "Canvace.View": {
            "name": "Canvace.View",
            "shortname": "Canvace.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/View.js",
            "line": 21,
            "description": "This class provides useful methods for managing the rendering viewport and\nthe projection or picking of graphic elements in it.\n\nNote that the `width` and `height` attributes of the canvas may not change\nafter the `View` object is constructed, or inconsistent rendering may result.\n\nYou do not usually need to construct a `View` object manually, as one is\nautomatically created by the `Stage` class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The JSON data output by the Canvace Development\nEnvironment.",
                    "type": "Object"
                },
                {
                    "name": "canvas",
                    "description": "An HTML5 canvas element where rendering has\nto be done.",
                    "type": "HTMLCanvasElement"
                }
            ]
        },
        "Canvace.View.Synchronizer": {
            "name": "Canvace.View.Synchronizer",
            "shortname": "Canvace.View.Synchronizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/View.js",
            "line": 301,
            "description": "A `Synchronizer` object is responsible for synchronizing the view so\nthat it is always pointed to a specified entity.\n\nA synchronizer is defined by a \"target area\" and a delay parameter. The\ntarget area is a rectangular area centered in the viewport where the\nsynchronizer constantly tries to fit the target entity by moving the\nview.\n\nThe target entity may sometimes reside out of the target area because of\nthe delay parameter, which indicates a delay in the movement of the view\ntoward a fitting position. The delay parameter is a floating point number\nin the range `[0, 1)` where 0 indicates no delay (the target entity\nalways resides withint the target area) and 1 indicates maximum delay\n(the view never moves and never reaches a fitting position).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "targetAreaWidth",
                    "description": "The width of the target area.",
                    "type": "Number"
                },
                {
                    "name": "targetAreaHeight",
                    "description": "The height of the target area.",
                    "type": "Number"
                },
                {
                    "name": "delay",
                    "description": "The delay parameter.",
                    "type": "Number"
                }
            ]
        },
        "Canvace.Visibility": {
            "name": "Canvace.Visibility",
            "shortname": "Canvace.Visibility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Canvace",
            "file": "src/Visibility.js",
            "line": 21,
            "description": "Gives access to the Page Visibility API, if supported by the browser.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/Ajax.js",
            "line": 213,
            "description": "Registers a callback function to be invoked when the loading is\ncomplete.",
            "itemtype": "method",
            "name": "onLoad",
            "chainable": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to invoke when the\nloading is complete.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "response",
                            "description": "the response object, as interpreted\naccording to the response type specified in the constructor.",
                            "type": "Mixed"
                        }
                    ]
                }
            ],
            "example": [
                "\n\tvar request = Canvace.Ajax.get('/data/stage1.json');\n\trequest.onLoad = function (stageData) {\n\t\t// ...\n\t};"
            ],
            "class": "Canvace.Ajax.Request"
        },
        {
            "file": "src/Ajax.js",
            "line": 234,
            "description": "Registers a callback function to be invoked in case of load errors.",
            "itemtype": "method",
            "name": "onError",
            "chainable": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to invoke when\nthe loading aborts with an error.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "statusCode",
                            "description": "The HTTP status code.",
                            "type": "Number"
                        },
                        {
                            "name": "statusText",
                            "description": "The HTTP status text.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "example": [
                "\n\tvar request = Canvace.Ajax.get('/data/stage1.json');\n\trequest.onError = function (statusCode, statusText) {\n\t\talert(statusText);\n\t};"
            ],
            "class": "Canvace.Ajax.Request"
        },
        {
            "file": "src/Ajax.js",
            "line": 332,
            "description": "Issues a `GET` HTTP request and returns a corresponding new\n{{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}} object.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "This first parameter is either a string representing\nthe URL of the requested resource, or a dictionary of options to pass to\nthe constructor of {{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}}.\n\nSee its documentation for more details about the allowed options.",
                    "type": "Mixed"
                },
                {
                    "name": "data",
                    "description": "Optional custom parameters to send to the server.\nIgnored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "load",
                    "description": "An optional callback function that gets called\nas soon as the server response arrives and the request completes\nsuccessfully. Ignored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "Indicates how the browser should interpret the\nresource contents. Ignored if the first parameter is not a string.\nDefaults to an empty string.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The instantiated request object.",
                "type": "Canvace.Ajax.Request"
            },
            "example": [
                "\n\tCanvace.Ajax.get('/data/stage1.json', function (stageData) {\n\t\t// ...\n\t}, 'json');"
            ],
            "class": "Canvace.Ajax"
        },
        {
            "file": "src/Ajax.js",
            "line": 366,
            "description": "Issues a `POST` HTTP request and returns a corresponding new\n{{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}} object.",
            "itemtype": "method",
            "name": "post",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "This first parameter is either a string representing\nthe URL of the requested resource, or a dictionary of options to pass to\nthe constructor of {{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}}.\n\nSee its documentation for more details about the allowed options.",
                    "type": "Mixed"
                },
                {
                    "name": "data",
                    "description": "Optional custom parameters to send to the server.\nIgnored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "load",
                    "description": "An optional callback function that gets called\nas soon as the server response arrives and the request completes\nsuccessfully. Ignored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "Indicates how the browser should interpret the\nresource contents. Ignored if the first parameter is not a string.\nDefaults to an empty string.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The instantiated request object.",
                "type": "Canvace.Ajax.Request"
            },
            "example": [
                "\n\tCanvace.Ajax.post('/threads', {\n\t\tsubject: 'Great news',\n\t\tmessage: 'Lorem ipsum dolor sit blah blah'\n\t}, function (response) {\n\t\twindow.location = '/threads/' + response.threadId;\n\t}, 'json');"
            ],
            "class": "Canvace.Ajax"
        },
        {
            "file": "src/Ajax.js",
            "line": 403,
            "description": "Issues a `PUT` HTTP request and returns a corresponding new\n{{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}} object.",
            "itemtype": "method",
            "name": "put",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "This first parameter is either a string representing\nthe URL of the requested resource, or a dictionary of options to pass to\nthe constructor of {{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}}.\n\nSee its documentation for more details about the allowed options.",
                    "type": "Mixed"
                },
                {
                    "name": "data",
                    "description": "Optional custom parameters to send to the server.\nIgnored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "load",
                    "description": "An optional callback function that gets called\nas soon as the server response arrives and the request completes\nsuccessfully. Ignored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "Indicates how the browser should interpret the\nresource contents. Ignored if the first parameter is not a string.\nDefaults to an empty string.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The instantiated request object.",
                "type": "Canvace.Ajax.Request"
            },
            "example": [
                "\n\tCanvace.Ajax.put('/user', {\n\t\tprofilePicture: 'http://www.gravatar.com/avatar/blahblah'\n\t}, function (response) {\n\t\tif (!response.success) {\n\t\t\talert(response.message);\n\t\t}\n\t}, 'json');"
            ],
            "class": "Canvace.Ajax"
        },
        {
            "file": "src/Ajax.js",
            "line": 441,
            "description": "Issues a `DELETE` HTTP request and returns a corresponding new\n{{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}} object.",
            "itemtype": "method",
            "name": "_delete",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "This first parameter is either a string representing\nthe URL of the requested resource, or a dictionary of options to pass to\nthe constructor of {{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}}.\n\nSee its documentation for more details about the allowed options.",
                    "type": "Mixed"
                },
                {
                    "name": "data",
                    "description": "Optional custom parameters to send to the server.\nIgnored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "load",
                    "description": "An optional callback function that gets called\nas soon as the server response arrives and the request completes\nsuccessfully. Ignored if the first parameter is not a string.\n\nSee the {{#crossLink \"Canvace.Ajax.Request\"}}{{/crossLink}} constructor\nfor more information.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "Indicates how the browser should interpret the\nresource contents. Ignored if the first parameter is not a string.\nDefaults to an empty string.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The instantiated request object.",
                "type": "Canvace.Ajax.Request"
            },
            "example": [
                "\n\tCanvace.Ajax._delete('/threads', {\n\t\tid: 1234\n\t}, function (response) {\n\t\tif (response.success) {\n\t\t\talert('Thread deleted');\n\t\t} else {\n\t\t\talert(response.message);\n\t\t}\n\t});"
            ],
            "class": "Canvace.Ajax"
        },
        {
            "file": "src/Ajax.js",
            "line": 481,
            "description": "Retrieves a resource by using a `GET` HTTP request and interprets its\ncontents as JSON.\n\nReturns a new {{#crossLink \"Canvace.Ajax.Request\"}}Request{{/crossLink}}\nobject.",
            "itemtype": "method",
            "name": "getJSON",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "The URL of the requested JSON resource.",
                    "type": "String"
                },
                {
                    "name": "onLoad",
                    "description": "The callback function to invoke when the\nloading is complete. See the\n{{#crossLink \"Canvace.Ajax.Request/onLoad\"}}{{/crossLink}} method for\ndetails.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onError",
                    "description": "The callback function to invoke when the\nloading aborts with an error. See the\n{{#crossLink \"Canvace.Ajax.Request/onError\"}}{{/crossLink}} method for\ndetails.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The instantiated request object.",
                "type": "Canvace.Ajax.Request"
            },
            "example": [
                "\n\tCanvace.Ajax.getJSON('/data/stage1.json', function (stageData) {\n\t\t// ...\n\t}, function (statusCode, statusText) {\n\t\talert(statusText);\n\t});"
            ],
            "class": "Canvace.Ajax"
        },
        {
            "file": "src/Animator.js",
            "line": 137,
            "description": "Sets the `tick` callback.\n\nThis method allows to define a callback later than construction time.\n\nIf you do not specify a callback function, the previously set callback\nfunction is unset and the\n{{#crossLink \"Canvace.Animator\"}}Animator{{/crossLink}} will not invoke\nany.",
            "itemtype": "method",
            "name": "tick",
            "chainable": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A user-defined `tick` callback function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar animator = new Canvace.Animator();\n\tvar mainLoop = new Canvace.RenderLoop(stage, null, loader, animator);\n\t\n\t// ...\n\t\n\tanimator.tick(function () {\n\t\t// custom tick code\n\t});\n\t\n\tmainLoop.run();"
            ],
            "class": "Canvace.Animator"
        },
        {
            "file": "src/Animator.js",
            "line": 167,
            "description": "Animates the specified entity instance by interpolating values for its\nposition.",
            "itemtype": "method",
            "name": "interpolatePosition",
            "params": [
                {
                    "name": "instance",
                    "description": "The entity instance whose\nposition must be interpolated.",
                    "type": "Canvace.Stage.Instance"
                },
                {
                    "name": "stop",
                    "description": "An object containing target values for the `i`, `j`\nand `k` fields of the instance's position. The target values are the\nvalues that will result when the animation is over.\n\nThe `i`, `j` and `k` fields of this object are optional: missing fields\nwill not be interpolated.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "i",
                            "description": "The target value for the `i` component of the\ninstance's position.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "j",
                            "description": "The target value for the `j` component of the\ninstance's position.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "k",
                            "description": "The target value for the `k` component of the\ninstance's position.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "duration",
                    "description": "The duration of the animation, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "An optional object specifying further options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "easing",
                            "description": "The easing function for the\nanimation.\n\nThis is a user-defined one-argument function taking a floating point\nnumber and returning another floating point number.\n\nIf `f` is the specified function, `f` must have the following properties:\n\n<ul>\n<li>must be defined in the range `[0, 1]`</li>\n<li>`f(0) = 0`</li>\n<li>`f(1) = 1`</li>\n</ul>\n\nYou can use one of the predefined easing functions provided by\n{{#crossLink \"Canvace.Animator.Easing\"}}{{/crossLink}}. You can also\nspecify a predefined easing function by passing its method name string.\n\nThis option defaults to\n{{#crossLink \"Canvace.Animator.Easing/linear:property\"}}{{/crossLink}},\nthat is the identity function.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "An optional user-defined callback\nfunction called when the animation is over.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\tanimator.interpolatePosition(character, {\n\t\ti: target.i,\n\t\tj: target.j\n\t}, 500, {\n\t\teasing: Canvace.Animator.Easing.deceleration,\n\t\tcallback: function () {\n\t\t\t// ...\n\t\t}\n\t});"
            ],
            "class": "Canvace.Animator"
        },
        {
            "file": "src/Animator.js",
            "line": 225,
            "description": "Animates the specified entity instance by interpolating values for its\nvelocity.",
            "itemtype": "method",
            "name": "interpolateVelocity",
            "params": [
                {
                    "name": "instance",
                    "description": "The entity instance whose\nvelocity must be interpolated.",
                    "type": "Canvace.Stage.Instance"
                },
                {
                    "name": "stop",
                    "description": "An object containing target values for the `i`, `j`\nand `k` fields of the instance's velocity. The target values are the\nvalues that will result when the animation is over.\n\nThe `i`, `j` and `k` fields of this object are optional: missing fields\nwill not be interpolated.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "i",
                            "description": "The target value for the `i` component of the\ninstance's velocity.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "j",
                            "description": "The target value for the `j` component of the\ninstance's velocity.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "k",
                            "description": "The target value for the `k` component of the\ninstance's velocity.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "duration",
                    "description": "The duration of the animation, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "An optional object specifying further options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "easing",
                            "description": "The easing function for the\nanimation.\n\nThis is a user-defined one-argument function taking a floating point\nnumber and returning another floating point number.\n\nIf `f` is the specified function, `f` must have the following properties:\n\n<ul>\n<li>must be defined in the range `[0, 1]`</li>\n<li>`f(0) = 0`</li>\n<li>`f(1) = 1`</li>\n</ul>\n\nYou can use one of the predefined easing functions provided by\n{{#crossLink \"Canvace.Animator.Easing\"}}{{/crossLink}}. You can also\nspecify a predefined easing function by passing its method name string.\n\nThis option defaults to\n{{#crossLink \"Canvace.Animator.Easing/linear:property\"}}{{/crossLink}},\nthat is the identity function.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "An optional user-defined callback\nfunction called when the animation is over.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\tanimator.interpolateVelocity(character, {\n\t\ti: 0,\n\t\tj: 0\n\t}, 1500, {\n\t\teasing: function (x) {\n\t\t\treturn 1 - x; // slow down (reduce velocity linearly)\n\t\t},\n\t\tcallback: function () {\n\t\t\t// ...\n\t\t}\n\t});"
            ],
            "class": "Canvace.Animator"
        },
        {
            "file": "src/Animator.js",
            "line": 285,
            "description": "Animates the specified entity instance by interpolating values for its\nuniform velocity.",
            "itemtype": "method",
            "name": "interpolateUniformVelocity",
            "params": [
                {
                    "name": "instance",
                    "description": "The entity instance whose\nuniform velocity must be interpolated.",
                    "type": "Canvace.Stage.Instance"
                },
                {
                    "name": "stop",
                    "description": "An object containing target values for the `i`, `j`\nand `k` fields of the instance's uniform velocity. The target values are\nthe values that will result when the animation is over.\n\nThe `i`, `j` and `k` fields of this object are optional: missing fields\nwill not be interpolated.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "i",
                            "description": "The target value for the `i` component of the\ninstance's uniform velocity.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "j",
                            "description": "The target value for the `j` component of the\ninstance's uniform velocity.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "k",
                            "description": "The target value for the `k` component of the\ninstance's uniform velocity.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "duration",
                    "description": "The duration of the animation, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "An optional object specifying further options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "easing",
                            "description": "The easing function for the\nanimation.\n\nThis is a user-defined one-argument function taking a floating point\nnumber and returning another floating point number.\n\nIf `f` is the specified function, `f` must have the following properties:\n\n<ul>\n<li>must be defined in the range `[0, 1]`</li>\n<li>`f(0) = 0`</li>\n<li>`f(1) = 1`</li>\n</ul>\n\nYou can use one of the predefined easing functions provided by\n{{#crossLink \"Canvace.Animator.Easing\"}}{{/crossLink}}. You can also\nspecify a predefined easing function by passing its method name string.\n\nThis option defaults to\n{{#crossLink \"Canvace.Animator.Easing/linear:property\"}}{{/crossLink}},\nthat is the identity function.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "An optional user-defined callback\nfunction called when the animation is over.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\tanimator.interpolateUniformVelocity(character, {\n\t\ti: 0,\n\t\tj: 0\n\t}, 1500, {\n\t\teasing: function (x) {\n\t\t\treturn 1 - x; // slow down (reduce velocity linearly)\n\t\t},\n\t\tcallback: function () {\n\t\t\t// ...\n\t\t}\n\t});"
            ],
            "class": "Canvace.Animator"
        },
        {
            "file": "src/Animator.js",
            "line": 345,
            "description": "Animates the specified entity instance by interpolating values for its\nacceleration.",
            "itemtype": "method",
            "name": "interpolateAcceleration",
            "params": [
                {
                    "name": "instance",
                    "description": "The entity instance whose\nacceleration must be interpolated.",
                    "type": "Canvace.Stage.Instance"
                },
                {
                    "name": "stop",
                    "description": "An object containing target values for the `i`, `j`\nand `k` fields of the instance's acceleration. The target values are the\nvalues that will result when the animation is over.\n\nThe `i`, `j` and `k` fields of this object are optional: missing fields\nwill not be interpolated.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "i",
                            "description": "The target value for the `i` component of the\ninstance's acceleration.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "j",
                            "description": "The target value for the `j` component of the\ninstance's acceleration.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "k",
                            "description": "The target value for the `k` component of the\ninstance's acceleration.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "duration",
                    "description": "The duration of the animation, in milliseconds.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "An optional object specifying further options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "easing",
                            "description": "The easing function for the\nanimation.\n\nThis is a user-defined one-argument function taking a floating point\nnumber and returning another floating point number.\n\nIf `f` is the specified function, `f` must have the following properties:\n\n<ul>\n<li>must be defined in the range `[0, 1]`</li>\n<li>`f(0) = 0`</li>\n<li>`f(1) = 1`</li>\n</ul>\n\nYou can use one of the predefined easing functions provided by\n{{#crossLink \"Canvace.Animator.Easing\"}}{{/crossLink}}. You can also\nspecify a predefined easing function by passing its method name string.\n\nThis option defaults to\n{{#crossLink \"Canvace.Animator.Easing/linear:property\"}}{{/crossLink}},\nthat is the identity function.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "callback",
                            "description": "An optional user-defined callback\nfunction called when the animation is over.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n\tanimator.interpolateAcceleration(character, {\n\t\ti: maxAcceleration.i,\n\t\tj: maxAcceleration.j\n\t}, 2000, {\n\t\teasing: Canvace.Animator.Easing.linear,\n\t\tcallback: function () {\n\t\t\t// ...\n\t\t}\n\t});"
            ],
            "class": "Canvace.Animator"
        },
        {
            "file": "src/Animator.js",
            "line": 415,
            "description": "Identity function.\n\nSee <a href=\"http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427ehqs1nv9907\" target=\"_blank\">here</a>\nfor a plot of the function graph.",
            "itemtype": "property",
            "name": "linear",
            "type": "Function",
            "static": 1,
            "example": [
                "\n\tanimator.interpolatePosition(character, {\n\t\ti: target.i,\n\t\tj: target.j\n\t}, 1000, {\n\t\teasing: Canvace.Animator.Easing.linear\n\t});"
            ],
            "class": "Canvace.Animator.Easing"
        },
        {
            "file": "src/Animator.js",
            "line": 436,
            "description": "Acceleration function.\n\nSee <a href=\"http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427e7stk11iilk\" target=\"_blank\">here</a>\nfor a plot of the function graph.",
            "itemtype": "property",
            "name": "acceleration",
            "type": "Function",
            "static": 1,
            "example": [
                "\n\tanimator.interpolatePosition(character, {\n\t\ti: target.i,\n\t\tj: target.j\n\t}, 1000, {\n\t\teasing: Canvace.Animator.Easing.acceleration\n\t});"
            ],
            "class": "Canvace.Animator.Easing"
        },
        {
            "file": "src/Animator.js",
            "line": 457,
            "description": "Deceleration function.\n\nSee <a href=\"http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427eb0umq33b2k\" target=\"_blank\">here</a>\nfor a plot of the function graph.",
            "itemtype": "property",
            "name": "deceleration",
            "type": "Function",
            "static": 1,
            "example": [
                "\n\tanimator.interpolatePosition(character, {\n\t\ti: target.i,\n\t\tj: target.j\n\t}, 1000, {\n\t\teasing: Canvace.Animator.Easing.deceleration\n\t});"
            ],
            "class": "Canvace.Animator.Easing"
        },
        {
            "file": "src/Animator.js",
            "line": 478,
            "description": "A function that goes back and forth between bigger and smaller values.\n\nSee <a href=\"http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427esfu8sff4au\" target=\"_blank\">here</a>\nfor a plot of the function graph.",
            "itemtype": "property",
            "name": "backAndForth",
            "type": "Function",
            "static": 1,
            "example": [
                "\n\tanimator.interpolatePosition(character, {\n\t\ti: target.i,\n\t\tj: target.j\n\t}, 1000, {\n\t\teasing: Canvace.Animator.Easing.backAndForth\n\t});"
            ],
            "class": "Canvace.Animator.Easing"
        },
        {
            "file": "src/Animator.js",
            "line": 499,
            "description": "A function that oscillates harmonically.\n\nSee <a href=\"http://www.wolframalpha.com/share/clip?f=d41d8cd98f00b204e9800998ecf8427ef17c2o8td0\" target=\"_blank\">here</a>\nfor a plot of the function graph.",
            "itemtype": "property",
            "name": "harmonic",
            "type": "Function",
            "static": 1,
            "example": [
                "\n\tanimator.interpolatePosition(character, {\n\t\ti: target.i,\n\t\tj: target.j\n\t}, 1000, {\n\t\teasing: Canvace.Animator.Easing.harmonic\n\t});"
            ],
            "class": "Canvace.Animator.Easing"
        },
        {
            "file": "src/AppCache.js",
            "line": 53,
            "description": "Registers an handler for the specified event. If the event name is\nnot known, this method throws an exception (see the supported event\nnames in the description of the `eventName` parameter).",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event for which to listen.\nCan be one of:\n\n- cached\n- checking\n- downloading\n- progress\n- error\n- updateready\n- noupdate\n- obsolete",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function which can be used to unregister the\n event handler.",
                "type": "Function"
            },
            "example": [
                "\n\tCanvace.AppCache.on('updateready', function () {\n\t\tvar prompt = 'An update is available. ' +\n\t\t\t'Do you want to reload the page now?';\n\t\tif (window.confirm(prompt)) {\n\t\t\twindow.location.reload();\n\t\t}\n\t});"
            ],
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 93,
            "description": "Returns the current cache status. This is `undefined`, if the browser has\nno support for the application cache, or it can be one of the following\nvalues:\n\n- `Canvace.AppCache.UNCACHED`\n- `Canvace.AppCache.IDLE`\n- `Canvace.AppCache.CHECKING`\n- `Canvace.AppCache.DOWNLOADING`\n- `Canvace.AppCache.UPDATEREADY`\n- `Canvace.AppCache.OBSOLETE`\n\nSee this class's properties for a deeper explanation of these values.",
            "itemtype": "method",
            "name": "getStatus",
            "static": 1,
            "return": {
                "description": "The current cache status value, or `undefined`.",
                "type": "Mixed"
            },
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 117,
            "description": "Invokes the application cache download process.\nThis method is a no-operation if the application cache is not supported.",
            "itemtype": "method",
            "name": "update",
            "static": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 130,
            "description": "Cancels the application cache download process.\nThis method is a no-operation if the application cache is not supported.",
            "itemtype": "method",
            "name": "abort",
            "static": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 143,
            "description": "Switches to the most recent application cache, if there is a newer one.\nIf there isn't, throws an `InvalidStateError` exception.\nThis method is a no-operation if the application cache is not supported.\n\nYou can use this method only when the cache status is\n`Canvace.AppCache.UPDATEREADY`: the adviced way of using this method is\nthus by using it inside an `updateready` event handler.\n\nSince all the resources that have been fetched _before_ the invocation of\nthis method will not be refreshed, it's sometimes simpler to just reload\nthe entire page.",
            "itemtype": "method",
            "name": "swapCache",
            "static": 1,
            "example": [
                "\n\tCanvace.AppCache.on('updateready', function () {\n\t\tCanvace.AppCache.swapCache();\n\t});"
            ],
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 169,
            "description": "This status indicates that no application cache is present.",
            "itemtype": "property",
            "name": "UNCACHED",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 179,
            "description": "This status indicates that no update to the application cache is\navailable.",
            "itemtype": "property",
            "name": "IDLE",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 190,
            "description": "This status indicates that the browser is currently checking for a cache\nupdate.",
            "itemtype": "property",
            "name": "CHECKING",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 201,
            "description": "This status indicates that the browser is currently downloading an updated\nversion of the application cache.",
            "itemtype": "property",
            "name": "DOWNLOADING",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 212,
            "description": "This status indicates that the browser has downloaded a more recent version\nof the application cache.",
            "itemtype": "property",
            "name": "UPDATEREADY",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/AppCache.js",
            "line": 223,
            "description": "This status indicates that the application cache currently in use is\nobsolete (and will be deleted). This typically happens when the cache\nmanifest cannot be correctly retrieved (HTTP 404 or 410).",
            "itemtype": "property",
            "name": "OBSOLETE",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.AppCache"
        },
        {
            "file": "src/Astar.js",
            "line": 116,
            "description": "A unique ID assigned to the node. Different nodes in the graph must have\ndifferent IDs.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Canvace.Astar.Node"
        },
        {
            "file": "src/Astar.js",
            "line": 124,
            "description": "The heuristically estimated cost to walk up to the target node.",
            "itemtype": "property",
            "name": "heuristic",
            "type": "Number",
            "class": "Canvace.Astar.Node"
        },
        {
            "file": "src/Astar.js",
            "line": 131,
            "description": "A map object whose keys are edge labels and whose values are functions.\nEach function returns the neighbor graph\n{{#crossLink \"Canvace.Astar.Node\"}}node{{/crossLink}} connected to this\nnode through the edge.",
            "itemtype": "property",
            "name": "neighbors",
            "type": "Object",
            "class": "Canvace.Astar.Node"
        },
        {
            "file": "src/Astar.js",
            "line": 141,
            "description": "A function used by {{#crossLink \"Canvace.Astar\"}}{{/crossLink}} to\ndetermine edge weights.\n\nYou can always return `1` or another non-zero constant value if your\ngraph is not weighted.\n\nEdge labels are implementation-defined; they only need to be consistent\nwith the keys of the\n{{#crossLink \"Canvace.Astar.Node/neighbors:property\"}}{{/crossLink}}\nmethod map.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "edgeLabel",
                    "description": "A label identifying the incident edge whose\nweight is to be retrieved.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The requested edge weight.",
                "type": "Number"
            },
            "class": "Canvace.Astar.Node"
        },
        {
            "file": "src/Astar.js",
            "line": 159,
            "description": "Finds a path between two nodes of a graph. A path is always found if one\nexists, otherwise `null` is returned.\n\nThe found path is always _admissible_, which means its cost is either\noptimal (the least possible one) or is at most `1 + epsilon` times the\noptimal one, where `epsilon` is the parameter specified to the\n{{#crossLink \"Canvace.Astar\"}}{{/crossLink}} constructor.\n\n`startNode` is an\n{{#crossLink \"Canvace.Astar.Node\"}}Astar.Node{{/crossLink}}-like object\nrepresenting the first node of the path to find;\n_{{#crossLink \"Canvace.Astar.Node\"}}Astar.Node{{/crossLink}}-like_ means\nit has to provide the same properties and methods described by the\ndocumentation of the\n{{#crossLink \"Canvace.Astar.Node\"}}Astar.Node{{/crossLink}} pseudo-class.\n\nThe target node is identified when the estimated distance from it,\nprovided by each node, is zero; the algorithm stops when this happens.\n\n{{#crossLink \"Canvace.Astar.Node\"}}Astar.Node{{/crossLink}} objects allow\nto specify a directed graph with weighted and labeled edges. Edge weights\nare real numbers and are used to compute the cost of a path. Edge labels\nare strings and are used when describing the computed path as an array of\nedges to walk.\n\nThe computed path, if one exists, is returned as an array of strings.\n`null` is returned if the target node is unreachable from the start node.",
            "itemtype": "method",
            "name": "findPath",
            "params": [
                {
                    "name": "startNode",
                    "description": "The starting node.",
                    "type": "Canvace.Astar.Node"
                }
            ],
            "return": {
                "description": "An array of edge labels that identify the edges that\nform the computed path, or `null` if no path can be found.",
                "type": "String[]"
            },
            "class": "Canvace.Astar"
        },
        {
            "file": "src/Audio.js",
            "line": 43,
            "description": "Tries to load the requested audio resource.\n\nYou are not required to use this method to manually load the audio\nresources: you can rely on the functionalities exposed by\n{{#crossLink \"Canvace.Loader\"}}Loader{{/crossLink}} to load multiple\nresources in one call and get notified of the loading progress.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "The URL where the audio resource resides.",
                    "type": "String"
                },
                {
                    "name": "onload",
                    "description": "An optional callback function to invoke when\nthe loading of the resource completes.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "node",
                            "description": "The\n{{#crossLink \"Canvace.Audio.SourceNode\"}}SourceNode{{/crossLink}} that\nhas just finished loading.",
                            "type": "Canvace.Audio.SourceNode"
                        }
                    ]
                },
                {
                    "name": "onerror",
                    "description": "An optional callback function to invoke if\nthe loading of the resource fails with an error.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "An audio node instance.",
                "type": "Canvace.Audio.SourceNode"
            },
            "class": "Canvace.Audio"
        },
        {
            "file": "src/Audio.js",
            "line": 66,
            "description": "Determines if the browser supports playing the requested MIME type.",
            "itemtype": "method",
            "name": "canPlayType",
            "params": [
                {
                    "name": "mimeType",
                    "description": "The MIME type to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`true` if the browser can play the specified MIME type,\n`false` otherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\tvar audio = new Canvace.Audio();\n\t\n\tfunction playSound(node) {\n\t\tnode.play();\n\t}\n\t\n\tif (audio.canPlayType('audio/mp3')) {\n\t\taudio.load('audio/foo.mp3', playSound);\n\t} else if (audio.canPlayType('application/ogg')) {\n\t\taudio.load('audio/bar.ogg', playSound);\n\t} else {\n\t\talert('No suitable audio resource available!');\n\t}"
            ],
            "class": "Canvace.Audio"
        },
        {
            "file": "src/Audio.js",
            "line": 124,
            "description": "Plays the associated sound resource, resuming from the last\nposition.",
            "itemtype": "method",
            "name": "play",
            "chainable": 1,
            "class": "Canvace.Audio.SourceNode"
        },
        {
            "file": "src/Audio.js",
            "line": 145,
            "description": "Pauses the playback of the associated sound resource.",
            "itemtype": "method",
            "name": "pause",
            "chainable": 1,
            "class": "Canvace.Audio.SourceNode"
        },
        {
            "file": "src/Audio.js",
            "line": 161,
            "description": "Returns a clone of this\n{{#crossLink \"Canvace.Audio.SourceNode\"}}SourceNode{{/crossLink}}\ninstance.\n\nThe new instance will have the same sound resource associated\nand the same flags applied (e.g., if this instance is set to be\nlooping, the cloned one will be as well).",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The clone of this instance.",
                "type": "Canvace.Audio.SourceNode"
            },
            "class": "Canvace.Audio.SourceNode"
        },
        {
            "file": "src/Audio.js",
            "line": 179,
            "description": "Indicates whether the associated sound resource has completed\nloading.",
            "itemtype": "method",
            "name": "isLoaded",
            "return": {
                "description": "`true` if the associated sound resource has\ncompleted loading, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Audio.SourceNode"
        },
        {
            "file": "src/Audio.js",
            "line": 191,
            "description": "Marks the sound resource as looping (i.e., it will start playing\nagain as soon as it ends its playback).",
            "itemtype": "method",
            "name": "setLooping",
            "params": [
                {
                    "name": "loop",
                    "description": "Indicates whether the playback should loop\nor not.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Canvace.Audio.SourceNode"
        },
        {
            "file": "src/Buckets.js",
            "line": 219,
            "description": "Removes the entity so that it is not enumerated by the\n{{#crossLink \"Canvace.Buckets/forEachElement}}{{/crossLink}} method any\nmore.\n\nThis method is idempotent: it does not have any effects when it is called\nagain after the first time.",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "`true`.",
                "type": "Boolean"
            },
            "class": "Canvace.Buckets.Entity"
        },
        {
            "file": "src/Buckets.js",
            "line": 240,
            "description": "Indicates whether this entity has been removed from the buckets.",
            "itemtype": "method",
            "name": "isRemoved",
            "return": {
                "description": "`true` if this element has been removed, `false`\notherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Buckets.Entity"
        },
        {
            "file": "src/Buckets.js",
            "line": 251,
            "description": "Returns the entity's projected position, which is its `(i, j, k)`\nposition left-multiplied by the projection matrix.\n\nThe position is returned as an object containing three fields, `x`, `y`\nand `z`, containing the `i`, `j` and `k` projected coordinates,\nrespectively.",
            "itemtype": "method",
            "name": "getProjectedPosition",
            "return": {
                "description": "The projected position as an object containing three\n`x`, `y` and `z` fields.",
                "type": "Object"
            },
            "class": "Canvace.Buckets.Entity"
        },
        {
            "file": "src/Buckets.js",
            "line": 271,
            "description": "Returns the 2D rectangular area corresponding to the entity's bounds.\n\nThe rectangle is returned as an object containing four fields: the `x`\nand `y` coordinates of the origin and the `width` and `height`.\n\nThe coordinates of the origin are calculated by left-multiplying the\n`(i, j, k)` position vector of the entity by the projection matrix and\nadding the entity's offset. The width and height are simply copied from\nthe entity descriptor.",
            "itemtype": "method",
            "name": "getProjectedRectangle",
            "return": {
                "description": "An object that describes the projected rectangle and\ncontains four fields: `x`, `y`, `width` and `height`.",
                "type": "Object"
            },
            "class": "Canvace.Buckets.Entity"
        },
        {
            "file": "src/Buckets.js",
            "line": 296,
            "description": "Updates the entity's position and possibly some internal data structures\nso that the entity is enumerated correctly by the\n{{#crossLink \"Canvace.Buckets/forEachElement}}{{/crossLink}} method after\nit is repositioned.\n\nThe specified `i`, `j` and `k` values may be real numbers.",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "i",
                    "description": "The new I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The new J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The new K coordinate.",
                    "type": "Number"
                }
            ],
            "class": "Canvace.Buckets.Entity"
        },
        {
            "file": "src/Buckets.js",
            "line": 331,
            "description": "Replaces the entity with another one identified by the specified ID. This\nentity is removed as if the\n{{#crossLink \"Canvace.Buckets.Entity/remove\"}}{{/crossLink}} method was\ncalled, and this\n{{#crossLink \"Canvace.Buckets.Entity\"}}Entity{{/crossLink}} object\nbecomes useless and should be discarded.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "id",
                    "description": "The new entity's ID.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new Entity object representing the new\nentity.",
                "type": "Canvace.Buckets.Entity"
            },
            "class": "Canvace.Buckets.Entity"
        },
        {
            "file": "src/Buckets.js",
            "line": 396,
            "description": "Adds a tile to the buckets and returns a function that removes it.\n\nIf the tile was configured as mutable in the Canvace Development\nEnvironment it can also be removed using the\n{{#crossLink \"Canvace.Buckets/removeTile\"}}{{/crossLink}} method or\nreplaced using the\n{{#crossLink \"Canvace.Buckets/replaceTile\"}}{{/crossLink}} method.\n\nThe returned function does not receive any arguments and always\nreturns `true`, and can remove the tile even if it was not configured\nas mutable.",
            "itemtype": "method",
            "name": "addTile",
            "params": [
                {
                    "name": "id",
                    "description": "The tile's ID.",
                    "type": "Number"
                },
                {
                    "name": "i",
                    "description": "The integer I position where the tile is located.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The integer J position where the tile is located.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The integer K position where the tile is located.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A function that removes the inserted tile. The\nfunction does not receive any arguments, always returns `true` and is\nidempotent: it does not have any effets when called again after the\nfirst time.",
                "type": "Function"
            },
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/Buckets.js",
            "line": 422,
            "description": "Adds an entity to the buckets. The specified I, J and K coordinates\ncan be real values.",
            "itemtype": "method",
            "name": "addEntity",
            "params": [
                {
                    "name": "id",
                    "description": "The entity's ID.",
                    "type": "Number"
                },
                {
                    "name": "i",
                    "description": "The I coordinate where the entity is located.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate where the entity is located.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate where the entity is located.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An Entity object representing the\ninserted entity.",
                "type": "Canvace.Buckets.Entity"
            },
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/Buckets.js",
            "line": 448,
            "description": "Removes the mutable tile located at the (integer) coordinates\n`(i, j, k)`.\n\nNote that a tile is not removed by this method if it is not mutable, even\nthough it is located at the specified coordinates.",
            "itemtype": "method",
            "name": "removeTile",
            "params": [
                {
                    "name": "i",
                    "description": "The tile's I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The tile's J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The tile's K coordinate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`true` on success, `false` on failure.",
                "type": "Boolean"
            },
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/Buckets.js",
            "line": 469,
            "description": "Replaces the mutable tile located at the specified `i`, `j` and `k`\ninteger coordinates with another tile.\n\nThis method has no effect if no mutable tile is found at the\nspecified coordinates; this includes both the following cases: no\nmutable tile found and no tile at all.\n\nWhen a mutable tile is found and successfully removed, the specified\ntile is inserted at its location and a function to remove it is\nreturned (similarly to the\n{{#crossLink \"Canvace.Buckets/addTile\"}}{{/crossLink}} method).",
            "itemtype": "method",
            "name": "replaceTile",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate where the tile to replace is\nlocated.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate where the tile to replace is\nlocated.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate where the tile to replace is\nlocated.",
                    "type": "Number"
                },
                {
                    "name": "newTileId",
                    "description": "The new tile's ID.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A function that removes the inserted tile, or\n`undefined` if a mutable tile could not be found at the specified\nposition.\n\nThe returned function does not receive any arguments, always returns\n`true` and is idempotent: it does not have any effets when called\nagain after the first time.",
                "type": "Function"
            },
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/Buckets.js",
            "line": 505,
            "description": "TODO",
            "itemtype": "method",
            "name": "synchronize",
            "params": [
                {
                    "name": "period",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/Buckets.js",
            "line": 513,
            "description": "Invokes the given callback function for each element within the\nviewport.\n\nFor each enumerated element, the specified `action` callback function\nreceives the element's projected X coordinate, projected Y coordinate\nand current frame image ID.",
            "itemtype": "method",
            "name": "forEachElement",
            "params": [
                {
                    "name": "action",
                    "description": "A callback function to invoke for each\nenumerated element.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "x",
                            "description": "The current element's projected X\ncoordinate.",
                            "type": "Number"
                        },
                        {
                            "name": "y",
                            "description": "The current element's projected Y\ncoordinate.",
                            "type": "Number"
                        },
                        {
                            "name": "id",
                            "description": "An image ID that can be used to render the\ncurrent element (animations are taken into account).",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/Buckets.js",
            "line": 575,
            "description": "Prerenders the \"static\" parts of the stage to internal canvases so as to\nspeed up the final rendering: after calling this method, the\n{{#crossLink \"Canvace.Buckets/forEachElement\"}}{{/crossLink}} method will\nreturn less elements in that some of them will have been joined, and less\n`drawImage` calls will be required by the\n{{#crossLink \"Canvace.Buckets/forEachElement\"}}forEachElement{{/crossLink}}\ncaller.\n\nOnly static tiles whose animations include only one frame are considered\n\"static\" parts of the stage and taken into account for prerendering.\n\nCall this method _after_ adding _all_ the various elements with the\n{{#crossLink \"Canvace.Buckets/addEntity\"}}{{/crossLink}} and\n{{#crossLink \"Canvace.Buckets/addTile\"}}{{/crossLink}} methods.",
            "itemtype": "method",
            "name": "prerender",
            "params": [
                {
                    "name": "loader",
                    "description": "A Loader object used to obtain the actual\nImage objects given the image IDs.",
                    "type": "Canvace.Loader"
                }
            ],
            "class": "Canvace.Buckets"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 72,
            "description": "Enables the effect.",
            "itemtype": "method",
            "name": "enable",
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 81,
            "description": "Disables the effect.\n\nThe effect can then be reenabled using the\n{{#crossLink \"Canvace.DebugEffect/enable\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "disable",
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 93,
            "description": "Toggles the effect and returns a boolean value indicating whether the\neffect was enabled or disabled.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "on",
                    "description": "When specified, the effect is enabled or disabled\ndepending on the specified boolean value (respectively `true` or\n`false`).\n\nWhen not specified, the effect's enable status is inverted.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the effect has been enabled, `false`\notherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 114,
            "description": "Indicates whether the effect is currently enabled.",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "`true` if the effect is enabled, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 124,
            "description": "Returns the current value for the specified option.\n\nSee the constructor reference for more details about the available\noptions.",
            "itemtype": "method",
            "name": "getOption",
            "params": [
                {
                    "name": "name",
                    "description": "The option name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The current value for the option.",
                "type": "Any"
            },
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 138,
            "description": "Sets the specified option.\n\nSee the constructor reference for more details about the available\noptions.",
            "itemtype": "method",
            "name": "setOption",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the option to set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value for the option.",
                    "type": "Any"
                }
            ],
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 152,
            "description": "Returns `false`.",
            "itemtype": "method",
            "name": "isOver",
            "return": {
                "description": "`false`.",
                "type": "Boolean"
            },
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/DebugEffect.js",
            "line": 184,
            "description": "Draws the enabled overlay elements.",
            "itemtype": "method",
            "name": "postProcess",
            "params": [
                {
                    "name": "context",
                    "description": "the rendering context of the\nHTML5 canvas.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Canvace.DebugEffect"
        },
        {
            "file": "src/Heap.js",
            "line": 137,
            "description": "Inserts the specified element into the heap and resorts the heap using\nstandard algorithms until its properties hold again.\n\nThis method operates in logarithmic time.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "element",
                    "description": "The element to be inserted.",
                    "type": "Any"
                }
            ],
            "example": [
                "\n\t// create a min-heap\n\tvar heap = new Canvace.Heap(function (a, b) {\n\t\tif (a < b) {\n\t\t\treturn -1;\n\t\t} else if (a > b) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t});\n\t\n\theap.push(4);\n\theap.push(1);\n\theap.push(3);\n\theap.push(2);\n\t\n\t// output order will be 1, 2, 3, 4\n\twhile (!heap.isEmpty()) {\n\t\talert(heap.pop());\n\t}"
            ],
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 178,
            "description": "Extracts the lowest priority element from the heap in logarithmic time\nusing standard algorithms.\n\nThe element's priority is determined by comparison with other elements\nusing the `compare` function specified during construction.",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "The extracted element.",
                "type": "Any"
            },
            "example": [
                "\n\t// create a min-heap\n\tvar heap = new Canvace.Heap(function (a, b) {\n\t\tif (a < b) {\n\t\t\treturn -1;\n\t\t} else if (a > b) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t});\n\t\n\theap.push(4);\n\theap.push(1);\n\theap.push(3);\n\theap.push(2);\n\t\n\t// output order will be 1, 2, 3, 4\n\twhile (!heap.isEmpty()) {\n\t\talert(heap.pop());\n\t}"
            ],
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 219,
            "description": "Returns the lowest priority element without extracting it from the heap.\n\nThe element's priority is determined by comparison with other elements\nusing the `compare` function specified during construction.\n\nThe return value is undefined if the heap does not contain any elements.\n\nThis method operates in constant time.",
            "itemtype": "method",
            "name": "peek",
            "return": {
                "description": "The lowest priority element, or `undefined` if the heap is\nempty.",
                "type": "Any"
            },
            "example": [
                "\n\t// TODO"
            ],
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 241,
            "description": "Searches the specified element in the heap and returns a boolean value\nindicating whether it was found.\n\nThe specified element does not have to be exactly the same physical\nobject as the one previously inserted in the heap, it only has to\nrepresent the same element; the actual comparison to determine whether\nthe two objects represent the same element is done by using the `same`\nfunction specified at construction time.\n\nThis method operates in linear time.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "element",
                    "description": "A `same`-equivalent element to look for.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "`true` if the element was found in the heap, `false`\notherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n\t// TODO"
            ],
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 264,
            "description": "Searches the specified element in the heap and returns it if it can be\nfound.\n\nThe return value is defined _only_ if the element is found, otherwise\nthis method does not return anything. You can test whether an element was\nfound or not using the `typeof` operator and checking against the string\n`'undefined'`, as in the following example:\n\n\tvar result = heap.find(...);\n\tif (typeof result !== 'undefined') {\n\t\t// the element has been found in the heap\n\t\t// and is contained in the `result` variable\n\t} else {\n\t\t// the element was NOT found in the heap\n\t}\n\nThe specified element does not have to be exactly the same physical\nobject as the one previously inserted in the heap, it only has to\nrepresent the same element; the actual comparison to determine whether\nthe two objects represent the same element is done by using the `same`\nfunction specified at construction time.\n\nThis method operates in linear time.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "element",
                    "description": "A `same`-equivalent element to look for.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The original element that was inserted into the heap, or\nnothing if no element was found.",
                "type": "Mixed"
            },
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 303,
            "description": "Decreases the specified element's priority and resorts the heap using\nstandard algorithms; as a consequence, the specified element will\ntypically move higher within the heap (which means gaining a lower\npriority and being extracted earlier).\n\nThis method has no effect if the heap does not contain the specified\nelement.",
            "itemtype": "method",
            "name": "decreaseKey",
            "params": [
                {
                    "name": "element",
                    "description": "The element whose key/priority has to be decreased.\n\nThis argument doesn't need to be exactly the same physical object as the\npreviously inserted element: it only has to represent the same element;\nthe actual comparison to determine whether the two objects represent the\nsame element is done by using the `same` function specified at\nconstruction time.",
                    "type": "Any"
                },
                {
                    "name": "decrease",
                    "description": "A user-specified function that does the actual\ndecreasing.\n\nThis is called during the execution of\n{{#crossLink \"Canvace.Heap/decreaseKey\"}}{{/crossLink}} and receives one\nargument, the element whose key is being decreased; note that the\noriginal element contained in the heap, not the possibly alternate\nversion specified to the `element` argument, is passed to the `decrease`\ncallback function.\n\nThe main purpose of the `decrease` function is to decrease the key so\nthat changes are reflected by subsequent `compare` and `same` calls.\n\nThe return value of the `decrease` function is ignored.",
                    "type": "Function"
                }
            ],
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 347,
            "description": "Returns the number of elements inserted in the heap so far.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of elements in the heap.",
                "type": "Number"
            },
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 357,
            "description": "Indicates whether the heap is empty or not.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "`true` if the heap is empty, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Heap.js",
            "line": 367,
            "description": "Empties the heap. This method operates in constant time.",
            "itemtype": "method",
            "name": "clear",
            "class": "Canvace.Heap"
        },
        {
            "file": "src/Keyboard.js",
            "line": 290,
            "description": "Indicates whether the key identified by the specified virtual key code is\ncurrently pressed. You can safely use DOM\\_VK\\_XXX codes from the\n`KeyEvent` global object: Canvace normalizes it across browsers.",
            "itemtype": "method",
            "name": "isKeyDown",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The virtual key code to test.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`true` if the specified key is currently pressed,\n`false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Keyboard"
        },
        {
            "file": "src/Keyboard.js",
            "line": 304,
            "description": "Indicates whether the specified keys are currently pressed. This method\naccepts any number of arguments and each argument is a virtual key code.\nYou can safely use the DOM\\_VK\\_XXX codes from the `KeyEvent` global\nobject: Canvace normalizes it across browsers.",
            "itemtype": "method",
            "name": "areKeysDown",
            "params": [
                {
                    "name": "keyCodes",
                    "description": "Any number of virtual key codes.",
                    "type": "Number",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "`false` if any of the specified keys is not currently\npressed, `true` otherwise. If no keys are specified `true` is returned.",
                "type": "Boolean"
            },
            "class": "Canvace.Keyboard"
        },
        {
            "file": "src/Keyboard.js",
            "line": 324,
            "description": "Registers a key handler that gets called when the specified key or keys\nare pressed.\n\nThis method returns a function that unregister the registered handler.\nThe returned function does not receive any arguments, does not return\nanything and is idempotent: it does not have any effects when called\nagain after the first time.\n\nThe same event handler can be registered more than once, in which case it\nactually gets called more than once each time the event occurs.\n\nEvent handlers are NOT necessarily called in the same order they are\nregistered.",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The virtual key code or an array of virtual key\ncodes.\n\nYou can safely use DOM\\_VK\\_XXX codes from the `KeyEvent` global object:\nCanvace normalizes it across browsers.",
                    "type": "Mixed"
                },
                {
                    "name": "handler",
                    "description": "A user-defined function that gets called when\nthe event occurs. It receives one argument, the virtual key code.\n\nWhen not specified defaults to an empty function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\n\nThe returned function does not receive any arguments and does not return\nanything.\n\nIf the same handler was registered more than once, the returned function\nonly removes its own registration.",
                "type": "Function"
            },
            "class": "Canvace.Keyboard"
        },
        {
            "file": "src/Keyboard.js",
            "line": 359,
            "description": "Registers a key handler that gets called when the specified key is\ndepressed or all of the specified keys are depressed, depending on\nwhether you specify one or more key codes.\n\nThis method returns a function that unregisters the registered handler.\nThe returned function does not receive any arguments, does not return\nanything and is idempotent: it does not have any effects when called\nagain after the first time.\n\nThe same event handler can be registered more than once, in which case it\nactually gets called more than once each time the event occurs.\n\nEvent handlers are NOT necessarily called in the same order they are\nregistered.",
            "itemtype": "method",
            "name": "onKeyUp",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The virtual key code or an array of virtual key\ncodes.\n\nYou can safely use DOM\\_VK\\_XXX codes from the `KeyEvent` global object:\nCanvace normalizes it across browsers.",
                    "type": "Mixed"
                },
                {
                    "name": "handler",
                    "description": "A user-defined function that gets called when\nthe event occurs. It receives one argument, the virtual key code.\n\nWhen not specified defaults to an empty function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\n\nThe returned function does not receive any arguments and does not return\nanything.\n\nIf the same handler was registered more than once, the returned function\nonly removes its own registration.",
                "type": "Function"
            },
            "class": "Canvace.Keyboard"
        },
        {
            "file": "src/Keyboard.js",
            "line": 410,
            "description": "Registers a key handler that gets called after the specified key or keys\nare pressed.\n\nThe only difference between the \"keyDown\" and \"keyPress\" events of this\nclass is that, in case a key is held down, the latter is fired multiple\ntimes while the former is fired only once.\n\nThe only difference between the \"keyUp\" and \"keyPress\" events of this\nclass is that the handlers for the latter gets all called before the\nhandlers for the former.\n\nThis method returns a function that unregister the registered handler.\nThe returned function does not receive any arguments, does not\nreturn anything and is idempotent: it does not have any effects when\ncalled again after the first time.\n\nThe same event handler can be registered more than once, in which case it\nactually gets called more than once each time the event occurs.\n\nEvent handlers are NOT necessarily called in the same order they are\nregistered.",
            "itemtype": "method",
            "name": "onKeyPress",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The virtual key code or an array of virtual key\ncodes.\n\nYou can safely use DOM\\_VK\\_XXX codes from the `KeyEvent` global object:\nCanvace normalizes it across browsers.",
                    "type": "Mixed"
                },
                {
                    "name": "handler",
                    "description": "A user-defined function that gets called when\nthe event occurs. It receives one argument, the virtual key code.\n\nWhen not specified defaults to an empty function.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\n\nThe returned function does not receive any arguments and does not return\nanything.\n\nIf the same handler was registered more than once, the returned function\nonly removes its own registration.",
                "type": "Function"
            },
            "class": "Canvace.Keyboard"
        },
        {
            "file": "src/List.js",
            "line": 56,
            "description": "Returns the accessed element.",
            "itemtype": "method",
            "name": "element",
            "return": {
                "description": "The accessed element.",
                "type": "Any"
            },
            "example": [
                "\n\tvar list = new Canvace.List();\n\tvar accessor = list.addTail('Hello, world!');\n\talert(accessor.element()); // alerts \"Hello, world!\""
            ],
            "class": "Canvace.List.Accessor"
        },
        {
            "file": "src/List.js",
            "line": 70,
            "description": "Returns an\n{{#crossLink \"Canvace.List.Accessor\"}}Accessor{{/crossLink}} for\naccessing the previous element of the list, or `null` if this\nAccessor represents the first element.\n\nAn exception is thrown if the element represented by this accessor\nhas been removed by this or any other accessor.",
            "itemtype": "method",
            "name": "previous",
            "return": {
                "description": "An Accessor for accessing the\nprevious element, or `null` if this Accessor represents the first\nelement.",
                "type": "Canvace.List.Accessor"
            },
            "example": [
                "\n\tvar list = new Canvace.List();\n\tlist.addTail(1);\n\tlist.addTail(2);\n\tlist.addTail(3);\n\t// the following reverse loop alerts, in order: 3, 2, 1\n\tfor (var a = list.getTail(); a; a = a.previous()) {\n\t\talert(a.element());\n\t}"
            ],
            "class": "Canvace.List.Accessor"
        },
        {
            "file": "src/List.js",
            "line": 104,
            "description": "Returns an\n{{#crossLink \"Canvace.List.Accessor\"}}Accessor{{/crossLink}} for\naccessing the next element of the list, or `null` if this Accessor\nrepresents the last element.\n\nAn exception is thrown if the element represented by this accessor\nhas been removed by this or any other accessor.",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "An Accessor for accessing the next\nelement, or `null` if this Accessor represents the last element.",
                "type": "Canvace.List.Accessor"
            },
            "example": [
                "\n\tvar list = new Canvace.List();\n\tlist.addTail(1);\n\tlist.addTail(2);\n\tlist.addTail(3);\n\t// the following loop alerts, in order: 1, 2, 3\n\tfor (var a = list.getHead(); a; a = a.next()) {\n\t\talert(a.element());\n\t}"
            ],
            "class": "Canvace.List.Accessor"
        },
        {
            "file": "src/List.js",
            "line": 137,
            "description": "Removes the element from the list.",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "`true` if the element was successfully removed,\n`false` otherwise. `false` is returned if this method is called more\nthan once, thus trying to remove the same element multiple times:\nonly the first call returns `true`.",
                "type": "Boolean"
            },
            "example": [
                "\n\tvar list = new Canvace.List();\n\tlist.addTail(1);\n\tlist.addTail(2);\n\tlist.addTail(3);\n\tfor (var a = list.getHead(); a; a = a.next()) {\n\t\tif (a.element() === 2) {\n\t\t\ta.remove();\n\t\t}\n\t}\n\t// the element 2 has been removed"
            ],
            "class": "Canvace.List.Accessor"
        },
        {
            "file": "src/List.js",
            "line": 179,
            "description": "Adds the specified element to the list before the current head element.\n\nAn {{#crossLink \"Canvace.List.Accessor\"}}Accessor{{/crossLink}} to the\nnew element is returned.",
            "itemtype": "method",
            "name": "addHead",
            "params": [
                {
                    "name": "element",
                    "description": "The element to add.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "An Accessor to the added element.",
                "type": "Canvace.List.Accessor"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 203,
            "description": "Returns an {{#crossLink \"Canvace.List.Accessor\"}}Accessor{{/crossLink}}\nto the head element, or `null` if the list does not contain any elements.",
            "itemtype": "method",
            "name": "getHead",
            "return": {
                "description": "An Accessor to the current head element,\nor `null` if the list is empty.",
                "type": "Canvace.List.Accessor"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 215,
            "description": "Adds the specified element to the list after the current tail element.\n\nAn {{#crossLink \"Canvace.List.Accessor\"}}Accessor{{/crossLink}} to the\nnew element is returned.",
            "itemtype": "method",
            "name": "addTail",
            "params": [
                {
                    "name": "element",
                    "description": "The element to add.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "An Accessor to the added element.",
                "type": "Canvace.List.Accessor"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 238,
            "description": "Returns an {{#crossLink \"Canvace.List.Accessor\"}}Accessor{{/crossLinK}}\nto the tail element, or `null` if the list does not contain any elements.",
            "itemtype": "method",
            "name": "getTail",
            "return": {
                "description": "An Accessor to the current tail element,\nor `null` if the list is empty.",
                "type": "Canvace.List.Accessor"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 250,
            "description": "Returns the number of elements currently in the list.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of elements in the list.",
                "type": "Number"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 260,
            "description": "Returns a boolean value indicating whether the list is empty or not.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "`true` is the list is empty, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 270,
            "description": "Removes all the elements from the list.\n\nThis method operates in constant time.",
            "itemtype": "method",
            "name": "clear",
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 283,
            "description": "Iterates over the contained elements, from the first to the last.\n\nThis method is faster than manually iterating using\n{{#crossLink \"Canvace.List/getHead\"}}{{/crossLink}} and subsequent\n{{#crossLink \"Canvace.List.Accessor/next\"}}Accessor.next{{/crossLink}}\ncalls because it does not instantiate accessors: the elements are\nreturned directly.\n\nFor each enumerated element the specified `action` callback function is\ncalled and is passed the element.\n\nThe iteration can be interrupted by returning `false` in the callback\nfunction.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "action",
                    "description": "A user-defined callback function that gets\ncalled for each iterated element. The function receives the current\nelement as an argument. If the function returns `false` the iteration is\ninterrupted.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "`true` if the callback function returned `false` and\nthe iteration was interrupted, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/List.js",
            "line": 315,
            "description": "Iterates over the contained elements in reverse order, from the last to\nthe first.\n\nThis method is faster than manually iterating using\n{{#crossLink \"Canvace.List/getTail\"}}{{/crossLink}} and subsequent\n{{#crossLink \"Canvace.List.Accessor/previous\"}}Accessor.previous{{/crossLink}}\ncalls because it does not instantiate accessors: the elements are\nreturned directly.\n\nFor each enumerated element the specified `action` callback function is\ncalled and is passed the element.\n\nThe iteration can be interrupted by returning `false` in the callback\nfunction.",
            "itemtype": "method",
            "name": "forEachReverse",
            "params": [
                {
                    "name": "action",
                    "description": "A user-defined callback function that gets\ncalled for each iterated element. The function receives the current\nelement as an argument. If the function returns `false` the iteration is\ninterrupted.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "`true` if the callback function returned `false` and\nthe iteration was interrupted, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.List"
        },
        {
            "file": "src/Loader.js",
            "line": 241,
            "description": "Loads an image from the exported image set.",
            "itemtype": "method",
            "name": "getImage",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the image to load.",
                    "type": "Mixed"
                },
                {
                    "name": "callback",
                    "description": "An optional callback function to invoke when\nthe loading of the image is complete.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The HTML image element representing the loaded\nimage.",
                "type": "HTMLImageElement"
            },
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Loader.js",
            "line": 342,
            "description": "Returns a `Canvace.Audio.SourceNode` representing the audio asset\nidentified by the specified name. This name corresponds to one of the\nnames specified to the `loadAssets` method. This method must be called\nafter the sounds have been loaded by the `loadAssets` method.",
            "itemtype": "method",
            "name": "getSound",
            "params": [
                {
                    "name": "name",
                    "description": "A name identifying an audio asset.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object that can be used to play\nthe sound back if the specified name is known, `null` otherwise.",
                "type": "Canvace.Audio.SourceNode"
            },
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Loader.js",
            "line": 360,
            "description": "Asynchronously loads all the images associated with the given Canvace\nstage and all the given sounds.",
            "itemtype": "method",
            "name": "loadAssets",
            "chainable": 1,
            "params": [
                {
                    "name": "imagesData",
                    "description": "The JSON data output by the Canvace\nDevelopment Environment.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "soundsData",
                    "description": "A map where the keys indicate the name of\nthe sound to load, and the values are `Array`s of source descriptors,\nwhich are either `Object`s (each containing the string properties\n'mimeType' and 'url') or `String`s (indicating the URL of the\nresource to load, in which case the loader tries to infer the MIME type\nfrom the file extension). Object and String source descriptors can be\nmixed.\n\nThese objects represent the audio file sources that will be tried in\norder, falling back to the next one if the browser doesn't support\nplaying the specified MIME type.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar soundResources;\n\n\t// Explicit description of the sources, complete with MIME type and URL\n\tsoundResources = {\n\t\t'first-sound': [{\n\t\t\tmimeType: 'audio/mp3',\n\t\t\turl: 'first.mp3'\n\t\t}, {\n\t\t\tmimeType: 'application/ogg',\n\t\t\turl: 'first.ogg'\n\t\t}],\n\t\t'second-sound': [{\n\t\t\tmimeType: 'audio/mp3',\n\t\t\turl: 'second.mp3'\n\t\t}, {\n\t\t\tmimeType: 'application/ogg',\n\t\t\turl: 'second.ogg'\n\t\t}]\n\t};\n\n\t// Implicit description of the sources, with just the URL specified\n\tsoundResources = {\n\t\t'first-sound': ['first.mp3', 'first.ogg'],\n\t\t'second-sound': ['second.mp3', 'second.ogg']\n\t};\n\n\t// Explicit, manual loading of the JSON resource\n\tCanvace.Ajax.getJSON('stage.json', function (stage) {\n\t\tvar loader = new Canvace.Loader({\n\t\t\tbasePath: 'media',\n\t\t\tcomplete: function () {\n\t\t\t\t// ...\n\t\t\t}\n\t\t});\n\t\tloader.loadAssets(stage, soundResources);\n\t});"
            ],
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Loader.js",
            "line": 439,
            "description": "Asynchronously loads all the images associated with the given Canvace\nstage and all the given sounds. This function takes care of loading the\nJSON data from the server with an HTTP `GET` request and instantiating\na {{#crossLink \"Canvace.Stage\"}}Stage{{/crossLink}} for the specified\ncanvas.\n\nWhen using this method, the registered completion handler will receive\ntwo parameters: this loader instance, and a\n{{#crossLink \"Canvace.Stage\"}}Stage{{/crossLink}} object.",
            "itemtype": "method",
            "name": "loadStage",
            "chainable": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "An HTML5 canvas element used where the stage\nwill be rendered. This parameter can be either the actual\n`HTMLCanvasElement`, or a selector string. In the latter case, the\nfirst matching element is used, and an exception is thrown if no\nmatching element is found.",
                    "type": "Mixed"
                },
                {
                    "name": "stageUrl",
                    "description": "The URL where the JSON resource can be\nloaded from. The loader will automatically perform a new `GET`\nrequest to that URL.",
                    "type": "String"
                },
                {
                    "name": "soundsData",
                    "description": "See the description of the omonymous\nparameter of the `loadAssets` function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar loader = new Canvace.Loader({\n\t\tbasePath: 'media',\n\t\tcomplete: function (loader, stage) {\n\t\t\t// ...\n\t\t}\n\t});\n\n\tloader.loadStage('#canvas', 'stage.json', {\n\t\t'first-sound': ['first.mp3', 'first.ogg'],\n\t\t'second-sound': ['second.mp3', 'second.ogg']\n\t});"
            ],
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Loader.js",
            "line": 490,
            "description": "TODO",
            "itemtype": "method",
            "name": "guessMimeType",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "String"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Loader.js",
            "line": 525,
            "description": "TODO",
            "itemtype": "method",
            "name": "getSourceInfo",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "TODO",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Object"
            },
            "example": [
                "\n\tTODO"
            ],
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Loader.js",
            "line": 550,
            "description": "Plays a sound represented by an audio asset previously loaded by the\nloader. The audio asset is identified by the `name` argument, that must\ncorrespond to a name passed to the\n{{#crossLink \"Canvace.Loader/loadAssets\"}}{{/crossLink}} method.\n\nThis method only _starts_ playing the sound, and immediately returns. It\nworks by simply calling the\n{{#crossLink \"Canvace.Audio.SourceNode/play\"}}Audio.SourceNode.play{{/crossLink}}\nmethod.\n\nThis method has no effect if the sound is already playing.\n\nThe sound can optionally be looped: when `true` is specified to the\noptional `loop` argument, the sound will play continuously.",
            "itemtype": "method",
            "name": "playSound",
            "params": [
                {
                    "name": "name",
                    "description": "A name identifying the audio asset.",
                    "type": "String"
                },
                {
                    "name": "loop",
                    "description": "An optional boolean value that indicates\nwhether the sound must be looped. It defaults to `false` when not specified.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "An object that can be used to play\nthe sound back if the specified name is known, `null` otherwise.",
                "type": "Canvace.Audio.SourceNode"
            },
            "class": "Canvace.Loader"
        },
        {
            "file": "src/Matrix.js",
            "line": 37,
            "description": "Returns the value at the specified I, J and K coordinates.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The requested value, or `undefined` if no value is present at\nthe specified position.",
                "type": "Any"
            },
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Matrix.js",
            "line": 51,
            "description": "Sets a value at the specified I, J and K coordinates.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to set.",
                    "type": "Any"
                }
            ],
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Matrix.js",
            "line": 65,
            "description": "Indicates whether a value is present at the specified I, J and K coordinates.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`true` if a value is present at the specified coordinates,\n`false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Matrix.js",
            "line": 79,
            "description": "Indicates whether the matrix contains any values at the specified layer K.\n\nA _layer_ is a set of elements in the matrix that have the same K coordinate.",
            "itemtype": "method",
            "name": "hasLayer",
            "params": [
                {
                    "name": "k",
                    "description": "The layer number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`true` if the matrix has the layer K, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Matrix.js",
            "line": 92,
            "description": "Possibly deletes the value at the specified I, J and K coordinates.",
            "itemtype": "method",
            "name": "erase",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A boolean value indicating whether a value was present at\nthe specified position and successfully deleted.",
                "type": "Boolean"
            },
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Matrix.js",
            "line": 112,
            "description": "Enumerates all the elements in the matrix and calls the specified callback\nfunction for each one.\n\nThe enumeration can be interrupted by the callback function returning\n`false`, in which case the `forEach` method returns `true`.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "A user-defined function that is invoked for each\nelement in the matrix.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "An optional object that is used as `this` when\ninvoking the `callback` function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the enumeration was interrupted by the callback\nfunction return `false`; `false` if all the elements were enumerated.",
                "type": "Boolean"
            },
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Matrix.js",
            "line": 139,
            "description": "Enumerates the layers in the matrix. A _layer_ is a set of elements in the\nmatrix that have the same `k` coordinate.\n\nThe enumeration can be interrupted by the callback function returning\n`false`, in which case the `forEachLayer` method returns `true`.",
            "itemtype": "method",
            "name": "forEachLayer",
            "params": [
                {
                    "name": "callback",
                    "description": "A user-defined function that is invoked for each\nlayer in the matrix.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "k",
                            "description": "The current layer number, or `k` coordinate,\npassed to the `callback` function at each iteration.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "scope",
                    "description": "An optional object that is used as `this` when\ninvoking the `callback` function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the enumeration was interrupted by the `callback`\nfunction return `false`; `false` if all the layers were enumerated.",
                "type": "Boolean"
            },
            "class": "Canvace.Matrix"
        },
        {
            "file": "src/Mobile.js",
            "line": 21,
            "description": "Indicates whether the site is currently being viewed on a mobile browser.",
            "itemtype": "property",
            "name": "mobileBrowser",
            "type": "Boolean",
            "class": "Canvace"
        },
        {
            "file": "src/Module.js",
            "line": 68,
            "description": "Performes a deep-copy of the properties owned by the source\nobject to the destination object.\n\nThis method is a no-operation if the specified source parameter\nis not an `Object` (i.e., returns the destination object as is).",
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "dest",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "The source object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object `dest`.",
                "type": "Object"
            },
            "class": "Canvace",
            "module": "Canvace"
        },
        {
            "file": "src/Module.js",
            "line": 92,
            "description": "Clones the given source object along with all of its properties.\nThe properties are deep-copied.\n\nThis method is a no-operation if the specified source parameter\nis not an `Object` or an `Array` (i.e., returns the source\nobject as is).",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "source",
                    "description": "The source object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A clone of the source object.",
                "type": "Object"
            },
            "class": "Canvace",
            "module": "Canvace"
        },
        {
            "file": "src/Module.js",
            "line": 125,
            "description": "Extends the given source object with the properties owned by\nall the subsequently specified objects.\n\nThe returned object is a new one: the given source object is\nnot modified.\n\nIf no arguments are passed after the source object, this method\nreduces to {{#crossLink \"Canvace/clone\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "source",
                    "description": "The source object.",
                    "type": "Object"
                },
                {
                    "name": "args...",
                    "description": "The extending objects.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new object, containing all the properties\nowned by `source` and by all of the specified `args`.",
                "type": "Object"
            },
            "class": "Canvace",
            "module": "Canvace"
        },
        {
            "file": "src/Mouse.js",
            "line": 96,
            "description": "Registers the specified user-defined event handler that is invoked every\ntime the mouse is moved over the HTML element.\n\nThe specified function receives two arguments, `x` and `y`, indicating\nthe coordinates of the mouse pointer relative to the element's left top\ncorner. The return value is ignored.\n\nThis method returns a function that unregisters the registered handler.\n\nMultiple handlers may be registered. The same handler may also be\nregistered more than once, in which case it gets called as many times as\nit was registered every time the mouse is moved.\n\nIf a handler is registered more than once, the function returned by this\nmethod only removes its own registration.",
            "itemtype": "method",
            "name": "onMove",
            "params": [
                {
                    "name": "handler",
                    "description": "A user-defined handler function. The specified\nfunction receives two arguments (the coordinates of the mouse pointer)\nand its return value is ignored.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\nThe returned function does not receive any arguments and does not return\nanything.",
                "type": "Function"
            },
            "class": "Canvace.Mouse",
            "module": "Canvace"
        },
        {
            "file": "src/Mouse.js",
            "line": 125,
            "description": "Registers the specified user-defined event handler that is invoked every\ntime a mouse button is pressed over the HTML element.\n\nThe specified function receives three arguments, `x` and `y`, indicating\nthe coordinates of the mouse pointer relative to the element's left top\ncorner, and `button`, indicating which mouse button has been pressed\n(`0` for left button, `1` for middle button, `2` for right button).\nThe return value is ignored.\n\nThis method returns a function that unregisters the registered handler.\n\nMultiple handlers may be registered. The same handler may also be\nregistered more than once, in which case it gets called as many times as\nit was registered every time a mouse button is pressed.\n\nIf a handler is registered more than once, the function returned by this\nmethod only removes its own registration.",
            "itemtype": "method",
            "name": "onDown",
            "params": [
                {
                    "name": "handler",
                    "description": "A user-defined handler function. The specified\nfunction receives two arguments (the coordinates of the mouse pointer)\nand its return value is ignored.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\nThe returned function does not receive any arguments and does not return\nanything.",
                "type": "Function"
            },
            "class": "Canvace.Mouse",
            "module": "Canvace"
        },
        {
            "file": "src/Mouse.js",
            "line": 156,
            "description": "Registers the specified user-defined event handler that is invoked every\ntime a mouse button is depressed over the HTML element.\n\nThe specified function receives three arguments, `x` and `y`, indicating\nthe coordinates of the mouse pointer relative to the element's left top\ncorner, and `button`, indicating which mouse button has been pressed\n(`0` for left button, `1` for middle button, `2` for right button).\nThe return value is ignored.\n\nThis method returns a function that unregisters the registered handler.\n\nMultiple handlers may be registered. The same handler may also be\nregistered more than once, in which case it gets called as many times as\nit was registered every time a mouse button is depressed.\n\nIf a handler is registered more than once, the function returned by this\nmethod only removes its own registration.",
            "itemtype": "method",
            "name": "onUp",
            "params": [
                {
                    "name": "handler",
                    "description": "A user-defined handler function. The specified\nfunction receives two arguments (the coordinates of the mouse pointer)\nand its return value is ignored.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\nThe returned function does not receive any arguments and does not return\nanything.",
                "type": "Function"
            },
            "class": "Canvace.Mouse",
            "module": "Canvace"
        },
        {
            "file": "src/Mouse.js",
            "line": 187,
            "description": "Registers the specified user-defined event handler that is invoked every\ntime the mouse is dragged over the HTML element.\n\nThe specified function receives five arguments, `x0` and `y0`, indicating\nthe last recorded coordinates of the mouse pointer before the drag event\nrelative to the element's left top corner, `x` and `y`, indicating the\ncurrent coordinates of the mouse pointer relative to the element's left\ntop corner, and `button`, indicating which mouse button has initiated the\ndrag event (`0` for left button, `1` for middle button, `2` for right\nbutton). The return value is ignored.\n\nThis method returns a function that unregisters the registered handler.\nMultiple handlers may be registered.\n\nThe same handler may also be registered more than once, in which case it\ngets called as many times as it was registered every time the mouse is\ndragged.\n\nIf a handler is registered more than once, the function returned by this\nmethod only removes its own registration.",
            "itemtype": "method",
            "name": "onDrag",
            "params": [
                {
                    "name": "handler",
                    "description": "A user-defined handler function. The specified\nfunction receives two arguments (the coordinates of the mouse pointer)\nand its return value is ignored.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\nThe returned function does not receive any arguments and does not return\nanything.",
                "type": "Function"
            },
            "class": "Canvace.Mouse",
            "module": "Canvace"
        },
        {
            "file": "src/Mouse.js",
            "line": 221,
            "description": "Registers the specified user-defined event handler that is invoked every\ntime the mouse wheel is used to scroll over the HTML element.\n\nThe specified function receives four arguments, `x`, `y`, `dX` and `dY`,\nindicating the coordinates of the mouse pointer relative to the element's\nleft top corner and the relative wheel movement in the X and Y\ndirections. The return value is ignored.\n\nThis method returns a function that unregisters the registered handler.\n\nMultiple handlers may be registered. The same handler may also be\nregistered more than once, in which case it gets called as many times as\nit was registered every time the mouse is moved.\n\nIf a handler is registered more than once, the function returned by this\nmethod only removes its own registration.",
            "itemtype": "method",
            "name": "onWheel",
            "params": [
                {
                    "name": "handler",
                    "description": "A user-defined handler function. The specified\nfunction receives three arguments (the `x` and `y` coordinates of the\nmouse pointer, and the relative `dX` and `dY` movement of the mouse\nwheel) and its return value is ignored.\nThe `dX` and `dY` arguments respectively assume positive values in case\nof a rightwards or upwards movement, and negative values in case of a\nleftwards or downwards movement.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function that unregisters the registered handler.\nThe returned function does not receive any arguments and does not return\nanything.",
                "type": "Function"
            },
            "class": "Canvace.Mouse",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 52,
            "description": "Inserts an element into the container in amortized constant time. The\nelement can be of any type (numbers, strings, objects, etc.) and can be\ninserted many times.\n\nThe {{#crossLink \"Canvace.MultiSet/add\"}}{{/crossLink}} method returns a\nfunction that removes the element. The returned function is idempotent:\nit does not have any effect when called again after the first time.\n\nExample:\n\n\tvar ms = new Canvace.MultiSet(1, 2);\n\tvar remove = ms.add(3); // ms now contains three elements: 1, 2 and 3\n\tremove(); // ms now contains two elements: 1 and 2\n\tremove(); // no effect, ms still contains 1 and 2\n\nThe returned function returns a boolean value indicating whether the\nelement was present and could be removed or not. `false` indicates the\nelement was not present because it had already been removed by a previous\ncall.\n\nExample:\n\n\tvar ms = new Canvace.MultiSet();\n\tvar remove = ms.add(3);\n\tif (remove()) {\n\t\talert('removed!');\n\t}\n\tif (remove()) {\n\t\talert('this is never alerted');\n\t}",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "element",
                    "description": "The element to be inserted in the\n{{#crossLink \"Canvace.MultiSet\"}}MultiSet{{/crossLink}}.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "A function that removes the inserted element.",
                "type": "Function"
            },
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 109,
            "description": "Inserts zero or more elements into the container in amortized constant time.\nThe elements can be of any type (numbers, strings, objects, etc.) and can be\ninserted many times.\n\nThis method is faster than\n{{#crossLink \"Canvace.MultiSet/add\"}}{{/crossLink}} because it doesn't\ngenerate any closures; infact it doesn't return anything.",
            "itemtype": "method",
            "name": "fastAdd",
            "params": [
                {
                    "name": "elements...",
                    "description": "Zero or more elements to insert in the\n{{#crossLink \"Canvace.MultiSet\"}}MultiSet{{/crossLink}}.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "example": [
                "\n\tvar ms = new Canvace.MultiSet(1, 2);\n\tms.fastAdd(3, 4); // ms now contains four elements: 1, 2, 3 and 4"
            ],
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 134,
            "description": "Iterates over the container and calls the specified function `action` for\neach iterated element.\n\nThe `action` function receives two arguments: the element and a function\nthat removes it if called. The removing function stays valid forever,\neven after the whole `forEach` call is over, and is idempotent: it does\nnot have any effects after it is called once.\n\nThe following example inserts some numbers into the container and then\nremoves only the numbers equal to 3:\n\n\tvar ms = new Canvace.MultiSet(1, 3, 7, 6, 3, 4, 3, 3, 5);\n\tms.forEach(function (element, remove) {\n\t\tif (element === 3) {\n\t\t\tremove();\n\t\t}\n\t});\n\t// ms now contains 1, 7, 6, 4, 5\n\nElements with repetitions are iterated as many times as they are\nrepeated. For example, in the previous snippet the number 3 is iterated\n(and removed) four times.\n\nNote that the order of iteration is undefined as it depends on the order\nof iteration over object properties implemented by the underlying\nJavaScript engine. This is typically the insertion order, which means\n{{#crossLink \"Canvace.MultiSet/forEach\"}}{{/crossLink}} enumerates the\nelements in the same order they are inserted by\n{{#crossLink \"Canvace.MultiSet/add\"}}{{/crossLink}}, but you must not\ndepend on that assumption.\n\nThe iteration is interrupted if the `action` function returns `false`.\nThe following example adds some numbers to the container, then iterates\nover it and interrupts when it encounters the number 3:\n\n\tvar ms = new Canvace.MultiSet(1, 2, 3, 4);\n\tms.forEach(function (element) {\n\t\tif (element === 3) {\n\t\t\treturn false;\n\t\t}\n\t});\n\nThe number 4 is not enumerated.\n\n{{#crossLink \"Canvace.MultiSet/forEach\"}}{{/crossLink}} returns `false`\nif the iteration completed and `true` if it was interrupted, which is\nsuitable for implementing finding algorithms.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "action",
                    "description": "The callback function that gets called for each\nelement of the multiset. It receives the current element and a callback\nfunction suitable for deleting it from the\n{{#crossLink \"Canvace.MultiSet\"}}MultiSet{{/crossLink}}.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "`true` if `action` returned `false`, `false` if it did\nnot and all the elements were enumerated.",
                "type": "Boolean"
            },
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 217,
            "description": "Iterates over the container and calls the specified function `action` for\neach iterated element.\n\nThe `action` function receives one argument, the current element. Any\nreturn value is ignored.\n\nThis method is similar to the\n{{#crossLink \"Canvace.MultiSet/forEach\"}}{{/crossLink}} method except it\ncan be faster on some browsers because it does not generate a closure\n(the element's removal function) at each iterated element and does not\nanalyze the return value of the callback function. Infact, the iterated\nelements cannot be removed and the iteration cannot be interrupted.\n\nYou usually use the\n{{#crossLink \"Canvace.MultiSet/forEach\"}}{{/crossLink}} method, but you\nmay also use {{#crossLink \"Canvace.MultiSet/fastForEach\"}}{{/crossLink}}\nif your callback function does not use its second argument (the removal\nfunction) and never returns `false`.\n\nNote that the order of iteration is undefined as it depends on the order\nof iteration over object properties implemented by the underlying\nJavaScript engine. This is typically the insertion order, which means\n{{#crossLink \"Canvace.MultiSet/fastForEach\"}}{{/crossLink}} enumerates\nthe elements in the same order they are inserted by\n{{#crossLink \"Canvace.MultiSet/add\"}}{{/crossLink}}, but you must not\nrely on that assumption.",
            "itemtype": "method",
            "name": "fastForEach",
            "params": [
                {
                    "name": "action",
                    "description": "The callback function that gets called for each\nelement of the multiset. It receives the current element as an argument.\nThe return value is ignored.",
                    "type": "Function"
                }
            ],
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 258,
            "description": "Returns the number of elements currently contained.\n\nIf an element is inserted more than once, it counts as many times as it\nis inserted.\n\nThis method operates in constant time.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of contained elements.",
                "type": "Number"
            },
            "example": [
                "\n\tvar ms = new Canvace.MultiSet(1, 2, 2, 3, 3);\n\talert(ms.count()); // alerts 5"
            ],
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 276,
            "description": "Indicates whether the container is empty or not.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "`true` if the container is empty, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/MultiSet.js",
            "line": 286,
            "description": "Empties the container: every element is removed and the count is reset to\nzero.\n\nThis method operates in constant time.",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n\tvar ms = new Canvace.MultiSet(1, 2, 3, 4, 5);\n\tms.clear();\n\talert(ms.count()); // alerts 0"
            ],
            "class": "Canvace.MultiSet",
            "module": "Canvace"
        },
        {
            "file": "src/ParametricStateMachine.js",
            "line": 106,
            "description": "Indicates the current state.",
            "itemtype": "method",
            "name": "getCurrentState",
            "return": {
                "description": "The name of the current state.",
                "type": "String"
            },
            "class": "Canvace.ParametricStateMachine",
            "module": "Canvace"
        },
        {
            "file": "src/Polyfill.js",
            "line": 82,
            "description": "Returns a reference to a possibly browser-prefixed property of a\ngiven object.\n\nIn case the property is a function, this function will return a\nproxy function which transparently invokes such function with the\ngiven object as the `this` reference.",
            "example": [
                "\n\t// Get a prefixed property from the `window` object.\n\tvar requestAnimationFrame = Canvace.Polyfill.getPrefixedProperty('requestAnimationFrame');\n\n\t// Get a prefixed function from a DOM element.\n\tvar canvas = document.getElementById('canvas');\n\tvar requestFullscreen = Canvace.Polyfill.getPrefixedProperty(canvas, ['requestFullscreen', 'requestFullScreen']);"
            ],
            "itemtype": "method",
            "name": "getPrefixedProperty",
            "params": [
                {
                    "name": "object",
                    "description": "An optional reference to the object holding\nthe requested property. Defaults to the `window` object.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "property",
                    "description": "The property name to retrieve. This can be a\n`String` (the property name) or an `Array` of `String`s (variants of\nthe same property name to try in order).",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "A reference to the requested property, or `undefined`."
            },
            "class": "Canvace.Polyfill",
            "module": "Canvace"
        },
        {
            "file": "src/Polyfill.js",
            "line": 108,
            "description": "Returns a reference to a possibly browser-prefixed constructor of a\ngiven object.\n\nIn case the property is a function, this function will not be wrapped\nby a proxy function - contrarily to what happens with the\n`getPrefixedProperty` function - so that it can be used with the\n`new` operator.",
            "example": [
                "\n\t// Get and use a prefixed constructor from the `window` object.\n\tvar context = new Canvace.Polyfill.getPrefixedProperty('AudioContext');"
            ],
            "itemtype": "method",
            "name": "getPrefixedConstructor",
            "params": [
                {
                    "name": "object",
                    "description": "An optional reference to the object holding\nthe requested property. Defaults to the `window` object.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "property",
                    "description": "The constructor name to retrieve. This can be\na `String` (the property name) or an `Array` of `String`s (variants\nof the same property name to try in order).",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "A reference to the requested constructor, or `undefined`."
            },
            "class": "Canvace.Polyfill",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 83,
            "description": "Returns the desired frame rate, that corresponds to the `rate`\nargument that was specified to the constructor.\n\nSee also\n{{#crossLink \"Canvace.RenderLoop/getActualRate\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getRate",
            "return": {
                "description": "The desired frame rate.",
                "type": "Number"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 105,
            "description": "Returns the actual frame rate, which is the number of frames per\nseconds that the machine is actually managing to render.\n\nThis value is always lower than or at most equal to the desired frame\nrate specified to the constructor.\n\nThis method returns `null` if the render loop is not currently\nrunning.",
            "itemtype": "method",
            "name": "getActualRate",
            "return": {
                "description": "The actual frame rate, or `null` if the render loop\nis not currently running.",
                "type": "Number"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 134,
            "description": "Returns the \"period\", which is the inverse of the specified rate.\n\nThe period is measured in milliseconds and is an integer number, so\nit is calculated as\n\n\tMath.floor(1000 / rate)\n\nwhere \"rate\" is the _desired_ rate that was specified to the\nconstructor (the same value returned by\n{{#crossLink \"Canvace.RenderLoop/getRate\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "getPeriod",
            "return": {
                "description": "The period.",
                "type": "Number"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 153,
            "description": "Returns the current _maximum period_, which is the maximum allowed\nperiod of time between two frames. If more than the maximum period\noccurs the time delta is reduced to the maximum period value so that\nphysics and animations are not stepped \"too much\" in case of\nexceptionally low frame rate (which is typically due to temporary\nconditions such as heavy system load).\n\nThe default maximum period is `5000` milliseconds.",
            "itemtype": "method",
            "name": "getMaximumPeriod",
            "return": {
                "description": "The maximum period expressed in milliseconds.",
                "type": "Number"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 170,
            "description": "Sets the maximum period. See\n{{#crossLink \"Canvace.RenderLoop/getMaximumPeriod\"}}{{/crossLink}}\nfor more information.",
            "itemtype": "method",
            "name": "setMaximumPeriod",
            "params": [
                {
                    "name": "value",
                    "description": "The new value expressed in milliseconds.",
                    "type": "Number"
                }
            ],
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 182,
            "description": "Returns the {{#crossLink \"Canvace.Stage\"}}Stage{{/crossLink}}\nrendererd by this render loop. This is the same object specified to\nthe constructor.",
            "itemtype": "method",
            "name": "getStage",
            "return": {
                "description": "The `Stage` rendered by this render loop.",
                "type": "Canvace.Stage"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 194,
            "description": "Returns the\n{{#crossLink \"Canvace.StageRenderer\"}}StageRenderer{{/crossLink}}\ninstance used to render the stage.",
            "itemtype": "method",
            "name": "getRenderer",
            "return": {
                "description": "The `StageRenderer` used to render\nthe stage.",
                "type": "Canvace.StageRenderer"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 288,
            "description": "Runs the render loop.\n\nIf the loop has just been constructed and not yet started, it is\nstarted.\n\nIf the loop is suspended, it is resumed.\n\nIf it is running or it has been stopped by the\n\t\t + {{#crossLink \"Canvace.RenderLoop/stop\"}}{{/crossLink}} method, this\nmethod does not have any effects.",
            "itemtype": "method",
            "name": "run",
            "chainable": 1,
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 313,
            "description": "Suspends the loop if it is currently running. Otherwise this method\ndoes not have any effects.",
            "itemtype": "method",
            "name": "suspend",
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 326,
            "description": "Indicates whether the loop was running and has been suspended and not\nyet resumed or stopped.",
            "itemtype": "method",
            "name": "isSuspended",
            "return": {
                "description": "`true` if the loop has been suspended, `false`\notherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 338,
            "description": "Definitely stops the loop. This means the loop will not be running\nany more, not even if the\n{{#crossLink \"Canvace.RenderLoop/start\"}}{{/crossLink}} method is\ncalled again.\n\nIf you just want to suspend the loop and resume it later, use the\n{{#crossLink \"Canvace.RenderLoop/suspend\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "stop",
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 357,
            "description": "Indicates whether the loop has been stopped by the\n{{#crossLink \"Canvace.RenderLoop/stop\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "isStopped",
            "return": {
                "description": "`true` if the loop has been stopped, `false`\notherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/RenderLoop.js",
            "line": 370,
            "description": "Configures loop settings. The settings are changed globally and affect\nonly {{#crossLink \"Canvace.RenderLoop\"}}RenderLoop{{/crossLink}} objects\ncreated since the last\n{{#crossLink \"Canvace.RenderLoop/setLoop\"}}{{/crossLink}} call.",
            "itemtype": "method",
            "name": "setLoop",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The loop type. Can be 'request', 'interval' or\n'auto'. 'request' means the `requestAnimationFrame` API is used.\n'interval' means the `setInterval` API is used. 'auto' means\n`requestAnimationFrame` is used by default and `setInterval` is used as a\nfallback where `requestAnimationFrame` is not available. The default\nvalue is 'auto'.",
                    "type": "String"
                },
                {
                    "name": "rate",
                    "description": "The desidred loop execution rate. This parameter\nis only meaningful when the `setInterval` API is used. The default value\nis 60.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Canvace.RenderLoop",
            "module": "Canvace"
        },
        {
            "file": "src/Renderer.js",
            "line": 57,
            "description": "Returns the `View` object used by this renderer. It is the same `view`\nparameter passed to the constructor.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "The `View` object used by this renderer.",
                "type": "Canvace.View"
            },
            "class": "Canvace.Renderer",
            "module": "Canvace"
        },
        {
            "file": "src/Renderer.js",
            "line": 68,
            "description": "Returns the `Buckets` object used by this renderer. It is the same\n`buckets` parameter passed to the constructor.",
            "itemtype": "method",
            "name": "getBuckets",
            "return": {
                "description": "The `Buckets` object used by this renderer.",
                "type": "Canvace.Buckets"
            },
            "class": "Canvace.Renderer",
            "module": "Canvace"
        },
        {
            "file": "src/Renderer.js",
            "line": 79,
            "description": "Synchronizes the underlying `Buckets` object on the specified period. The\ncall is simply forwarded to its `synchronize` method.",
            "itemtype": "method",
            "name": "synchronize",
            "params": [
                {
                    "name": "period",
                    "description": "The period value the buckets must be synchronized\nto.",
                    "type": "Number"
                }
            ],
            "class": "Canvace.Renderer",
            "module": "Canvace"
        },
        {
            "file": "src/Renderer.js",
            "line": 89,
            "description": "Returns the context object of the specified HTML5 canvas. This is the\nsame context used by the renderer.",
            "itemtype": "method",
            "name": "getContext",
            "return": {
                "description": "The HTML5 canvas 2D context.",
                "type": "CanvasRenderingContext2D"
            },
            "class": "Canvace.Renderer",
            "module": "Canvace"
        },
        {
            "file": "src/Renderer.js",
            "line": 104,
            "description": "Renders the stage to the canvas.",
            "itemtype": "method",
            "name": "render",
            "class": "Canvace.Renderer",
            "module": "Canvace"
        },
        {
            "file": "src/RumbleEffect.js",
            "line": 53,
            "description": "Modifies the canvas's projection matrix so as to simulate a rumble\neffect.",
            "itemtype": "method",
            "name": "preProcess",
            "params": [
                {
                    "name": "context",
                    "description": "the rendering context of the\nHTML5 canvas.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Canvace.RumbleEffect",
            "module": "Canvace"
        },
        {
            "file": "src/RumbleEffect.js",
            "line": 70,
            "description": "Indicates whether the effect is over depending on the duration that was\nspecified to the constructor.",
            "itemtype": "method",
            "name": "isOver",
            "return": {
                "description": "`true` if the effect is over, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.RumbleEffect",
            "module": "Canvace"
        },
        {
            "file": "src/RumbleEffect.js",
            "line": 82,
            "description": "The default period setting, initially `3`.\n\nSee the documentation of the class constructor for details.",
            "itemtype": "property",
            "name": "defaultPeriod",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.RumbleEffect",
            "module": "Canvace"
        },
        {
            "file": "src/RumbleEffect.js",
            "line": 94,
            "description": "The default extent setting, initially `2`.\n\nSee the documentation of the class constructor for details.",
            "itemtype": "property",
            "name": "defaultExtent",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Canvace.RumbleEffect",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 94,
            "description": "Returns the numeric ID of the entity.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The numeric ID of the entity.",
                "type": "Number"
            },
            "class": "Canvace.Stage.Entity",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 104,
            "description": "Returns the entity's custom properties as set in the Canvace\nDevelopment Environment.\n\nThe original `properties` object is returned, so that modifications\nactually affect the entity's properties.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "The entity's `properties` field containing the\ncustom properties the user set in the Canvace Development\nEnvironment.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Entity",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 120,
            "description": "Indicates whether physics is enabled for this entity.\n\nInstances of entities that have physics enabled are automatically\n\"ticked\" when the whole stage is ticked. \"Ticking\" an entity instance\nmeans calling its `tick` method (see `Canvace.Stage.Instance.tick`),\nwhile \"ticking\" the whole stage means calling the `Stage.tick`\nmethod.\n\nPhysics in entities can be enabled or disabled in the Canvace\nDevelopment Environment.",
            "itemtype": "method",
            "name": "isPhysicsEnabled",
            "return": {
                "description": "`true` if physics is enabled for this entity,\n`false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Entity",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 140,
            "description": "Returns a reference to an object describing the bounding box of this\nentity. Any modification made to the returned object will affect the\nway instances of this entity interact with the surrounding\nenvironment.\n\nThe returned object contains four real number fields: `i0`, `j0`,\n`iSpan` and `jSpan`. The `i0` and `j0` fields are the offsets of the\norigin of the bounding box from the position of the entity along the\nI and J axis, respectively. The `iSpan` and `jSpan` fields are the\nspan of the bounding box along the I and J axis, respectively.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "An object containing four fields, `i0`, `j0`,\n\t`iSpan` and `jSpan`, describing the bounding box.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Entity",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 160,
            "description": "Enumerates all the instances of this entity currently present in the\nstage, filtering them based on their custom properties.\n\nThe `properties` argument contains the filtering properties: an\ninstance is enumerated only if all of its filtered properties' values\ncorrespond to those declared in the `properties` argument. All other\nproperties in the instance are not taken into account. This means\nthat if you specify an empty `properties` object, all the instances\nare enumerated.\n\nSome custom properties may actually be objects containing other\nproperties. This method performs a recursive deep comparison: the\n`properties` object may have nested objects containing other\nfiltering properties.\n\nThe entity instance is filtered based on its custom *instance*\nproperties, but its custom *entity* properties are used as a\nfallback: if an instance does not contain a required property it is\nstill enumerated if its entity does.\n\nEach enumerated instance is passed to the callback function as a\n`Canvace.Stage.Instance` object.\n\nThe enumeration can be interrupted by returning `false` in the\n`action` callback function.",
            "itemtype": "method",
            "name": "forEachInstance",
            "params": [
                {
                    "name": "action",
                    "description": "A callback function that gets called for\nevery instance.\n\nIt receives one single argument of type `Canvace.Stage.Instance` and\ncan interrupt the enumeration by returning `false`.",
                    "type": "Function"
                },
                {
                    "name": "properties",
                    "description": "The optional filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the callback function returned `false`\nand the enumeration was interrupted, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Entity",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 210,
            "description": "Creates a new instance of this entity and places it in the stage at\nthe specified `(i, j, k)` position.\n\nThe new instance has the initial velocity, uniform velocity and\nacceleration vectors all set to `(0, 0, 0)`.\n\nThe new instance is returned as a `Canvace.Stage.Instance` object.",
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate where the new instance has to be\nplaced.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate where the new instance has to be\nplaced.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate where the new instance has to be\nplaced.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The newly created instance.",
                "type": "Canvace.Stage.Instance"
            },
            "class": "Canvace.Stage.Entity",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 339,
            "description": "Returns the numeric ID of the instance, or `null` if this instance\nwas not initially present in the JSON data exported from the Canvace\nDevelopment Environment and was later added to the stage.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The numeric ID of the instance, or `null` if the\ninstance has no ID.",
                "type": "Number"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 352,
            "description": "Returns the entity instance's custom properties as set in the Canvace\nDevelopment Environment.\n\nThe original `properties` object is returned, so that modifications\nactually affect the instance's properties.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "The entity instance's `properties` field containing\nthe custom properties the user set in the Canvace Development\nEnvironment.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 368,
            "description": "Returns the numeric ID of the entity of this instance.",
            "itemtype": "method",
            "name": "getEntityId",
            "return": {
                "description": "The numeric ID of the entity of this instance.",
                "type": "Number"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 378,
            "description": "Returns a `Canvace.Stage.Entity` object representing the entity whose\ninstance is represented by this object.",
            "itemtype": "method",
            "name": "getEntity",
            "return": {
                "description": "This instance's entity as a\n`Canvace.Stage.Entity` object.",
                "type": "Canvace.Stage.Entity"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 390,
            "description": "Indicates whether physics is enabled for this instance's entity.",
            "itemtype": "method",
            "name": "isPhysicsEnabled",
            "return": {
                "description": "`true` if physics is enabled, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 400,
            "description": "Returns the instance's `(i, j, k)` position vector as an object\ncontaining three fields, `i`, `j` and `k`.\n\nNote that the original position vector object associated to the\ninstance is returned: changes made to the returned object affect the\nposition of the instance. You may use the returned object to manually\ncontrol the position of the instance.\n\nAlso note that changing the position of an instance by modifying the\nreturned object does not affect its _rendered_ position until the\n`update` method is called.",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "An object containing three fields, `i`, `j` and `k`,\nindicating the current position.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 421,
            "description": "Returns the instance's projected position, which is its `(i, j, k)`\nposition left-multiplied by the projection matrix.\n\nNote that this method returns the last calculated projected position,\nwhich means it does not reflect changes made by the `tick` method or\nby changing the position, velocity or uniform velocity objects\nreturned by the `getPosition`, `getVelocity`, and\n`getUniformVelocity` methods. For changes to be reflected, the\ninstance must be first updated using the `update` method.\n\nThe position is returned as an object containing three fields, `x`,\n`y` and `z`, containing the `i`, `j` and `k` projected coordinates,\nrespectively.",
            "itemtype": "method",
            "name": "getProjectedPosition",
            "return": {
                "description": "The projected position as an object containing three\n`x`, `y` and `z` fields.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 442,
            "description": "Returns the 2D rectangular area corresponding to the instances's\nbounds.\n\nNote that this method returns the last calculated projected\nrectangle, which means it does not reflect changes made by such\nmethods as `tick`, `moveBy`, `setPosition` and so on. For changes to\nbe reflected, the instance must be first updated using the `update`\nmethod.\n\nThe rectangle is returned as an object containing four fields: the\n`x` and `y` coordinates of the origin and the `width` and `height`.\n\nThe coordinates of the origin are calculated by left-multiplying the\n`(i, j, k)` position vector of the instance by the projection matrix\nand adding the entity's offset. The width and height are simply\ncopied from the entity descriptor.",
            "itemtype": "method",
            "name": "getProjectedRectangle",
            "return": {
                "description": "An object that describes the projected rectangle and\ncontains four fields: `x`, `y`, `width` and `height`.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 466,
            "description": "Indicates whether the instance is in or out of range.\n\nAn entity instance is in range when its projected position (as\nreturned by the `getProjectedPosition` method) falls within the\n\"range\" area, which is a rectangular area centered in the center of\nthe viewport. The range area is usually much larger than the viewport\narea.\n\nThis method is useful, for example, for discarding too far entity\ninstances when stepping/ticking the physics of the game in order to\nimprove performance, and is used by the `Stage.Range` inner class.",
            "itemtype": "method",
            "name": "inRange",
            "params": [
                {
                    "name": "width",
                    "description": "The width of the range area.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the range area.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`true` if this instance falls within the specified\nrange area, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 500,
            "description": "Returns the velocity vector of this instance as an object containing\nthree fields, `i`, `j` and `k`, indicating the respective components\nof the vector. The velocity vector is initially `(0, 0, 0)`.\n\nThis velocity vector is influenced by the acceleration vector of the\ninstance: the components of the acceleration vector are added to the\nrespective components of the velocity vector each time the instance\nis ticked using the `tick` method.\n\nNote that the original velocity vector object associated to the\ninstance is returned: changes made to the returned object affect the\nvelocity of the instance. You may use the returned object to manually\ncontrol the velocity of the instance.",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "The instance's velocity vector as an object\ncontaining three fields, `i`, `j` and `k`, indicating the respective\ncomponents of the vector.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 524,
            "description": "Returns the uniform velocity vector of this instance.\n\nThe vector is returned as an object containing three fields, `i`, `j`\nand `k`, indicating the respective components of the vector.\n\nNote that the original uniform velocity vector object associated to\nthe instance is returned: changes made to the returned object affect\nthe uniform velocity of the instance. You may use the returned object\nto manually control the uniform velocity of the instance.",
            "itemtype": "method",
            "name": "getUniformVelocity",
            "return": {
                "description": "The instance's uniform velocity vector as an object\ncontaining three fields, `i`, `j` and `k`, indicating the respective\ncomponents of the vector.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 544,
            "description": "Returns the full velocity vector of the instance.\n\nThe full velocity vector is the velocity vector plus the uniform\nvelocity vector.\n\nThe vector is returned as an object containing three fields, `i`, `j`\nand `k`, indicating the respective components of the vector.\n\nA new object is created, filled and returned every time this method\nis called; modifying its content does not have any effects on the\nstate of the instance. The velocity and uniform velocity of the\ninstance must be controlled independently.",
            "itemtype": "method",
            "name": "getFullVelocity",
            "return": {
                "description": "The instance's full velocity vector as an object\ncontaining three fields, `i`, `j` and `k`, indicating the respective\ncomponents of the vector.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 577,
            "description": "Returns the instance's own acceleration vector as an object\ncontaining three fields, `i`, `j` and `k`, indicating the respective\ncomponents of the vector.\n\nThe acceleration vector is initially `(0, 0, 0)`.\n\nNote that the original acceleration vector object associated to the\ninstance is returned: changes made to the returned object affect the\nacceleration of the instance. You may use the returned object to\nmanually control the acceleration of the instance.",
            "itemtype": "method",
            "name": "getAcceleration",
            "return": {
                "description": "The instance's acceleration vector as an object\ncontaining three fields, `i`, `j` and `k`, indicating the respective\ncomponents of the vector.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 598,
            "description": "Tests for collisions between this entity instance and the tiles of\nthe specified `Canvace.TileMap`.\n\nThis method invokes the `Canvace.TileMap.rectangleCollision` using\nthe position of the instance, its current full velocity vector and\nthe bounding box of its entity, as set in the Canvace Development\nEnvironment.\n\nThis method does not change the state of the instance in any way; it\nonly forwards the return value of the\n`Canvace.TileMap.rectangleCollision` method to the caller.",
            "itemtype": "method",
            "name": "testTileCollision",
            "params": [
                {
                    "name": "collides",
                    "description": "An optional user-defined callback\nfunction that is invoked by the `testTileCollision` method for every\ntile that collides with the instance.\n\nThe function receives two arguments, the tile's solid flag and its\nproperties, and must return a boolean value indicating whether the\ntile is \"solid\" for this instance and must be taken into account as a\ncolliding tile. If the function returns `false` the tile is _not_\ntaken into account.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "tileMap",
                    "description": "An optional `Canvace.TileMap`\nobject whose tiles are tested for collisions with this entity\ninstance. When not specified, this stage's tile map is used.",
                    "type": "Canvace.TileMap",
                    "optional": true
                }
            ],
            "return": {
                "description": "A vector that is computed by the method and can be\nused to restore a \"regular\" configuration where the entity instance\ndoes not collide with the tiles.\n\nSee the `Canvace.TileMap.rectangleCollision` method for more\ninformation, the return value is the same.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 644,
            "description": "Reacts to possible collisions between this entity instance and the\ntiles of the specified\n{{#crossLink \"Canvace.TileMap\"}}{{/crossLink}}.\n\nThis method invokes the `Canvace.TileMap.rectangleCollision` method\nusing the position of the instance, its current full velocity vector\nand the bounding box of its entity, as set in the Canvace Development\nEnvironment.\n\nIt then reacts to the collision by updating the state of the instance\ntrying to resume a regular configuration where there is no collision.\n\nSpecifically, the position of the instance is updated by adding the I\nand J components of the vector returned by\n`Canvace.TileMap.rectangleCollision` and each one of the I and J\ncomponents of the velocity vector is set to zero only if its sign is\nthe opposite of the corresponding component in the vector returned by\n`Canvace.TileMap.rectangleCollision`.\n\nNote that only the velocity vector is changed, the uniform velocity\nvector is not.\n\nThe vector returned by `Canvace.TileMap.rectangleCollision` is also\nforwarded to the caller.",
            "itemtype": "method",
            "name": "tileCollision",
            "params": [
                {
                    "name": "collides",
                    "description": "TODO",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "tileMap",
                    "description": "A `Canvace.TileMap` object whose\ntiles are tested for collisions with this entity instance.",
                    "type": "Canvace.TileMap",
                    "optional": true
                }
            ],
            "return": {
                "description": "The vector object returned by the\n`rectangleCollision` method of\n{{#crossLink \"Canvace.TileMap\"}}{{/crossLink}}.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 704,
            "description": "TODO",
            "itemtype": "method",
            "name": "collidesWithTiles",
            "params": [
                {
                    "name": "collides",
                    "description": "TODO",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "tileMap",
                    "description": "TODO",
                    "type": "Canvace.TileMap",
                    "optional": true
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 738,
            "description": "Detects collisions between a rectangular area and the bounding box of\nthis entity instance.\n\nA vector is returned indicating two I and J values that must be added\nto the coordinates of the rectangular area in order to resume a\nregular configuration where the area does not collide with the\ninstance.\n\nIn case there is not any collision, the returned vector is `(0, 0)`.\n\nThe rectangular area is specified by the `i`, `j`, `di` and `dj`\narguments.\n\nThe implementation of this method assumes the rectangular area\nrepresents a moving entity (though not necessarily a Canvace entity)\nwhich is characterized by its own velocity vector; this vector is\nused in the collision algorithm in that it assumes the moving entity\ncannot have compenetrated the bounding box of this instance along the\nI or J axis more than the velocity vector component for that axis.\nThis is necessary in order to obtain a functional physics algorithm.\n\nIf the rectangular area actually is the bounding box of a Canvace\nentity, you can specify the I and J components of its actual velocity\nvector for the `vi` and `vj` arguments; such vector can be retrieved\nby adding the two vectors returned by the `getVelocity` and\n`getUniformVelocity` methods.\n\nIf specifying a velocity vector is not suitable, you can specify\narbitrary constant values; a good choice is usually 1 for both `vi`\nand `vj`. However, do not specify 0, as this would _always_ result in\nno collision.\n\nThis method can be used to implement in-layer, bounding box based,\nentity vs. entity collisions. If the rectangular area represents an\nentity's bounding box, the `i` and `j` coordinates of its origin can\nbe obtained using the `Canvace.Stage.Instance.getPosition` method,\nwhile the `di` and `dj` span values are usually constant and must be\narbitrarily determined by the developer.",
            "itemtype": "method",
            "name": "rectangleCollision",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate of the origin of the rectangular\narea. This may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate of the origin of the rectangular\narea. This may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "di",
                    "description": "The span of the rectangular area along the I axis.\nThis may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "dj",
                    "description": "The span of the rectangular area along the J axis.\nThis may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "Di",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "Dj",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An object containing two number fields, `i` and `j`,\nspecifying the I and J components of the computed vector.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 843,
            "description": "Tests for collisions between this entity instance and the specified\none.\n\nThis method invokes the `rectangleCollision` method of the specified\n_other_ instance using the position of _this_ instance, its current\nfull velocity vector and the bounding box of its entity as set in the\nCanvace Development Environment.\n\nThis method does not change the state of the instances in any way; it\nonly forwards the return value of the `rectangleCollision` method to\nthe caller.",
            "itemtype": "method",
            "name": "testCollision",
            "params": [
                {
                    "name": "otherInstance",
                    "description": "Another `Instance`\nobject that is tested for collisions with this instance.",
                    "type": "Canvace.Stage.Instance"
                }
            ],
            "return": {
                "description": "A vector that is computed by the method and can be\nused to restore a \"regular\" configuration where the specified\ninstance does not collide with this instance.\n\nSee the `Canvace.Stage.Instance.rectangleCollision` method for more\ninformation, the return value is the same.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 877,
            "description": "Reacts to possible collisions between this entity instance and the\nspecified one.\n\nThis method invokes the `Canvace.Stage.Instance.rectangleCollision`\nmethod of the specified _other_ instance passing the position of\n_this_ instance, its current full velocity vector and the bounding\nbox of its entity as set in the Canvace Development Environment.\n\nIt then reacts to the collision by updating the state of _this_\ninstance trying to resume a regular configuration where there is no\ncollision.\n\nSpecifically, the position of the instance is updated by adding the I\nand J components of the vector returned by `rectangleCollision` and\neach one of the I and J components of the velocity vector is set to\nzero only if its sign is the opposite of the corresponding component\nin the vector returned by `rectangleCollision`.\n\nNote that only the velocity vector is changed, the uniform velocity\nvector is not.\n\nThe vector returned by `Canvace.Stage.Instance.rectangleCollision`\nis also forwarded to the caller.",
            "itemtype": "method",
            "name": "collision",
            "params": [
                {
                    "name": "otherInstance",
                    "description": "Another `Instance`\nobject that is tested for collisions with this instance.",
                    "type": "Canvace.Stage.Instance"
                }
            ],
            "return": {
                "description": "The vector object returned by the\n`Canvace.Stage.Instance.rectangleCollision` method.",
                "type": "Object"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 932,
            "description": "TODO",
            "itemtype": "method",
            "name": "collidesWithInstance",
            "params": [
                {
                    "name": "otherInstance",
                    "description": "TODO",
                    "type": "Canvace.Instance"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 963,
            "description": "\"Ticks\" the instance, updating its position based on its velocity and\nits velocity based on its acceleration.\n\nThis method is automatically called by the `Canvace.Stage.tick`\nmethod if the entity has physics enabled.",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "dt",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 986,
            "description": "Updates the instance so that its graphical representation in\nsubsequent renderings reflect its actual position.\n\nSince this method is potentially costly, it should be called only\nonce per instance at each iteration of the render loop. This is what\nthe `RenderLoop` class does.\n\nThis method is automatically called by the `Canvace.Stage.update`\nmethod if the entity has physics enabled.",
            "itemtype": "method",
            "name": "update",
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1003,
            "description": "Removes the entity instance from the stage. The instance will not be\nrendered any more by subsequent `Renderer.render` calls and will not\nbe enumerated any more by the `Buckets.forEachElement` method.\n\nThis method does not do anything if the instance has already been\nremoved or replaced with another entity using the `replaceWith`\nmethod.",
            "itemtype": "method",
            "name": "remove",
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1019,
            "description": "Indicates whether this instance has been removed from the stage.",
            "itemtype": "method",
            "name": "isRemoved",
            "return": {
                "description": "`true` if this instance has been removed, `false`\notherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1028,
            "description": "Replaces this entity instance with a new instance of another entity.\n\nAfter being replaced, this instance becomes invalid and this object\nshould be discarded. The method returns a new `Stage.Instance` object\nthat can be used to control the new instance.\n\nThe new instance inherits this instance's position, velocity and\nacceleration vectors.\n\nThis method throws an exception if it is invoked after the instance\nhas been removed or already replaced by a previous call.",
            "itemtype": "method",
            "name": "replaceWith",
            "params": [
                {
                    "name": "entity",
                    "description": "An entity to be instantiated\nand whose new instance must replace this one.",
                    "type": "Canvace.Stage.Entity"
                }
            ],
            "return": {
                "description": "A new `Stage.Instance` object\nrepresenting the new instance.",
                "type": "Canvace.Stage.Instance"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1055,
            "description": "Duplicates the instance, also replicating its velocity, uniform\nvelocity and acceleration vectors.\n\nAn entity may be optionally specified as a `Canvace.Stage.Entity`\nobject to the `entity` argument so that the new instance refers to\nanother entity.\n\nThe new instance is returned as a `Canvace.Stage.Instance` object.",
            "itemtype": "method",
            "name": "fork",
            "params": [
                {
                    "name": "entity",
                    "description": "An optional entity the new\ninstance refers to. The new instance refers to the same entity of\nthis instance if this argument is not specified.",
                    "type": "Canvace.Stage.Entity",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new instance.",
                "type": "Canvace.Stage.Instance"
            },
            "class": "Canvace.Stage.Instance",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1143,
            "description": "Returns the stage's name.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The stage's name.",
                "type": "String"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1154,
            "description": "Returns the stage's custom properties as set in the Canvace Development\nEnvironment.\n\nThe original `properties` object is returned, so that modifications\nactually affect the stage's properties.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "The stage's `properties` field containing the custom\nproperties the user set in the Canvace Development Environment.",
                "type": "Object"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1169,
            "description": "Returns the HTML5 canvas where the stage is rendered. This is the same\ncanvas object specified to the constructor.",
            "itemtype": "method",
            "name": "getCanvas",
            "return": {
                "description": "The HTML5 canvas where the stage is rendered.",
                "type": "HTMLCanvasElement"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1180,
            "description": "Returns a `View` object that can be used by a `Renderer` to render the\nstage. It is internally built and initialized by `Stage`'s constructor.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "A `View` object.",
                "type": "Canvace.View"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1191,
            "description": "Returns a {{#crossLink \"Canvace.Buckets\"}}{{/crossLink}} object that can\nbe used by a {{#crossLink \"Renderer\"}}{{/crossLink}} to render the\nstage. It is internally built and initialized by `Canvace.Stage`'s\nconstructor.",
            "itemtype": "method",
            "name": "getBuckets",
            "return": {
                "description": "A `Buckets` object.",
                "type": "Canvace.Buckets"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1204,
            "description": "TODO",
            "itemtype": "method",
            "name": "prerender",
            "params": [
                {
                    "name": "loader",
                    "description": "TODO",
                    "type": "Canvace.Loader"
                }
            ],
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1212,
            "description": "Provides a {{#crossLink \"Canvace.TileMap\"}}{{/crossLink}} object that\nallows to manage this stage's tile map.\n\nThe `Canvace.TileMap` object is created lazily only once, the first time\nthis method is called; subsequent calls return the same object.",
            "itemtype": "method",
            "name": "getTileMap",
            "return": {
                "description": "A `TileMap` object associated to this stage's\ntile map.",
                "type": "Canvace.TileMap"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1227,
            "description": "Enumerates all the entities of this stage, filtering them based on their\ncustom properties.\n\nThe `properties` argument contains the filtering properties: an entity is\nenumerated only if all of its filtered properties' values correspond to\nthose declared in the `properties` argument. All other properties in the\nentity are not taken into account. This means that if you specify an\nempty `properties` object, all the entities are enumerated.\n\nSome custom properties may actually be objects containing other\nproperties. This method performs a recursive deep comparison: the\n`properties` object may have nested objects containing other filtering\nproperties.\n\nEach enumerated entity is passed to the callback function as a\n`Canvace.Stage.Entity` object.\n\nThe enumeration can be interrupted by returning `false` in the\n`action` callback function.",
            "itemtype": "method",
            "name": "forEachEntity",
            "params": [
                {
                    "name": "action",
                    "description": "A callback function that gets called for every\nentity.\n\nIt receives one single argument of type `Canvace.Stage.Entity` and can\ninterrupt the enumeration by returning `false`.",
                    "type": "Function"
                },
                {
                    "name": "properties",
                    "description": "The optional filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the callback function returned `false` and\nthe enumeration was interrupted, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1274,
            "description": "Returns an array of entities not filtered by the specified filtering\nproperties.\n\nEntities are filtered based on their custom properties. The `properties`\nargument contains the filtering properties: an entity is returned only if\nall of its filtered properties' values correspond to those declared in\nthe `properties` argument. All other properties in the entity are not\ntaken into account. This means that if you specify an empty `properties`\nobject, all the entities are returned.\n\nSome custom properties may actually be objects containing other\nproperties. This method performs a recursive deep comparison: the\n`properties` object may have nested objects containing other filtering\nproperties.\n\nThe chosen entities are returned as an array of `Stage.Entity` objects.",
            "itemtype": "method",
            "name": "getEntities",
            "params": [
                {
                    "name": "properties",
                    "description": "The filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of `Canvace.Stage.Entity` objects\nrepresenting the returned entities.",
                "type": "Canvace.Stage.Entity[]"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1309,
            "description": "Returns an arbitrarily chosen entity among the ones not filtered by the\nspecified filtering properties.\n\nEntities are filtered based on their custom properties. The `properties`\nargument contains the filtering properties: an entity is eligible only if\nall of its filtered properties' values correspond to those declared in\nthe `properties` argument. All other properties in the entity are not\ntaken into account. This means that if you specify an empty `properties`\nobject, all the entities are eligible.\n\nSome custom properties may actually be objects containing other\nproperties. This method performs a recursive deep comparison: the\n`properties` object may have nested objects containing other filtering\nproperties.\n\nThe chosen entity is returned as a `Stage.Entity` object.",
            "itemtype": "method",
            "name": "getEntity",
            "params": [
                {
                    "name": "properties",
                    "description": "The filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A `Canvace.Stage.Entity` object\nrepresenting the returned entity.",
                "type": "Canvace.Stage.Entity"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1343,
            "description": "Enumerates the entity instances currently present in the stage. Each\ninstance is returned as a `Canvace.Stage.Instance` object.\n\nThe enumeration can be interrupted by returning `false` in the `action`\ncallback function.",
            "itemtype": "method",
            "name": "forEachInstance",
            "params": [
                {
                    "name": "action",
                    "description": "A callback function that gets called for every\ninstance.\n\nIt receives one single argument of type `Canvace.Stage.Instance` and can\ninterrupt the enumeration by returning `false`.",
                    "type": "Function"
                },
                {
                    "name": "properties",
                    "description": "The optional filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the callback function returned `false` and\nthe enumeration was interrupted, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1368,
            "description": "Returns an array of entity instances among the ones currently in the\nstage and not filtered by the specified filtering properties.\n\nEntity instances are filtered based on their custom properties. The\n`properties` argument contains the filtering properties: an instance is\nreturned only if all of its filtered properties' values correspond to\nthose declared in the `properties` argument. All other properties in the\ninstance are not taken into account. This means that if you specify an\nempty `properties` object, an array containing all the instances is\nreturned.\n\nSome custom properties may actually be objects containing other\nproperties. This method performs a recursive deep comparison: the\n`properties` object may have nested objects containing other filtering\nproperties.\n\nThe entity instances are filtered based on its custom *instance*\nproperties, but its custom *entity* properties are used as a fallback: if\nan instance does not contain a required property it is still returned if\nits entity does.\n\nThe chosen instances are returned as an array of `Canvace.Stage.Instance`\nobjects.",
            "itemtype": "method",
            "name": "getInstances",
            "params": [
                {
                    "name": "properties",
                    "description": "The filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of `Canvace.Stage.Instance`\nobjects representing the returned entity instances.",
                "type": "Canvace.Stage.Instance[]"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1408,
            "description": "Returns an arbitrarily chosen entity instance among the ones currently in\nthe stage and not filtered by the specified filtering properties.\n\nEntity instances are filtered based on their custom properties. The\n`properties` argument contains the filtering properties: an instance is\neligible only if all of its filtered properties' values correspond to\nthose declared in the `properties` argument. All other properties in the\ninstance are not taken into account. This means that if you specify an\nempty `properties` object, all the instances are eligible.\n\nSome custom properties may actually be objects containing other\nproperties. This method performs a recursive deep comparison: the\n`properties` object may have nested objects containing other filtering\nproperties.\n\nThe entity instance is filtered based on its custom *instance*\nproperties, but its custom *entity* properties are used as a fallback: if\nan instance does not contain a required property it is still eligible if\nits entity does.\n\nThe chosen instance is returned as a `Canvace.Stage.Instance` object.",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "properties",
                    "description": "The filtering properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A `Canvace.Stage.Instance` object\nrepresenting the returned entity instance.",
                "type": "Canvace.Stage.Instance"
            },
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1456,
            "description": "TODO",
            "itemtype": "method",
            "name": "forEachInstance",
            "params": [
                {
                    "name": "action",
                    "description": "TODO",
                    "type": "Function"
                },
                {
                    "name": "properties",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Boolean"
            },
            "class": "Canvace.Stage.Range",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1477,
            "description": "TODO",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "dt",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "class": "Canvace.Stage.Range",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1491,
            "description": "TODO",
            "itemtype": "method",
            "name": "update",
            "class": "Canvace.Stage.Range",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1505,
            "description": "\"Ticks\" all the entities of the stage that have physics enabled. This\nmethod simply iterates over such entities and invokes their `tick`\nmethod.\n\nYou do not usually need to call this method as it is automatically called\nby Canvace's render loop implementation in the\n{{#crossLink \"Canvace.RenderLoop\"}}{{/crossLink}} class.",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "dt",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/Stage.js",
            "line": 1524,
            "description": "Updates all the entities of the stage that have physics enabled. This\nmethod simply iterates over such entities and invokes their `update`\nmethod.\n\nYou do not usually need to call this method as it is automatically called\nby Canvace's render loop implementation in the\n{{#crossLink \"Canvace.RenderLoop\"}}{{/crossLink}} class.",
            "itemtype": "method",
            "name": "update",
            "class": "Canvace.Stage",
            "module": "Canvace"
        },
        {
            "file": "src/StageRenderer.js",
            "line": 53,
            "description": "Adds an effect to the effect chain.\n\nAn effect is an object containing an optional `preProcess` method, an\noptional `postProcess` method and a mandatory `isOver` method.\n\nThe `preProcess` and `postProcess` methods are used by the underlying\n`Renderer` and thus receive a `context` argument, which is the \"2d\"\ncontext of the HTML5 canvas (see the constructor of the `Renderer`\nclass).\n\nThe `isOver` method does not receive any arguments and must return a\nboolean value indicating whether the effect must be disapplied, in which\ncase it is automatically removed by the `StageRenderer`.\n\nEffects can be chained: the `addEffect` method may be called any number\nof times to add any number of effects.\n\nDuring the rendering of a frame, the `preProcess` methods of each effect\nin the chain are called in effect insertion order while the `postProcess`\nmethods are called in reverse order.",
            "itemtype": "method",
            "name": "addEffect",
            "params": [
                {
                    "name": "effect",
                    "description": "An effect object.",
                    "type": "Object"
                }
            ],
            "class": "Canvace.StageRenderer",
            "module": "Canvace"
        },
        {
            "file": "src/StateMachine.js",
            "line": 208,
            "description": "Indicates the current state.",
            "itemtype": "method",
            "name": "getCurrentState",
            "return": {
                "description": "The name of the current state.",
                "type": "String"
            },
            "class": "Canvace.StateMachine",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 82,
            "description": "Returns an object describing the layout of the tile.\n\nThe layout describes the tile span along the I and J axes and the I\nand J coordinates of the reference cell relative to the tile box.\n\nMost tiles span over one single cell and thus their layouts specify\n`1` for both the I and J span sizes and `0` for both the I and J\ncoordinates of the reference cell. But in case of multiple tiles the\nI and/or J span sizes may be greater than `1` and the reference cell\nmay be located somewhere else withint the tile box.\n\nNote that the coordinates of the reference cell must be within the\n`[0, s - 1]` range, where `s` indicates the span size over the axis.\n\nAlso, both span sizes and reference cell coordinates are always\ninteger numbers.",
            "itemtype": "method",
            "name": "getLayout",
            "return": {
                "description": "An object containing four fields: `iSpan`, `jSpan`,\n`i0` and `j0`. The first two are the span sizes, while the other two\nare the coordinates of the reference cell.",
                "type": "Object"
            },
            "class": "Canvace.TileMap.Tile",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 114,
            "description": "Indicates whether this descriptor describes a solid tile or not.",
            "itemtype": "method",
            "name": "isSolid",
            "return": {
                "description": "`true` if this tile is solid, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.TileMap.Tile",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 124,
            "description": "Returns the tile's custom properties as set in the Canvace\nDevelopment Environment.\n\nThe original `properties` object is returned, so that modifications\nactually affect the tile's properties.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "The tile's `properties` field containing the custom\nproperties the user set in the Canvace Development Environment.",
                "type": "Object"
            },
            "class": "Canvace.TileMap.Tile",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 140,
            "description": "Enumerates the numbers of the layers currently in the tile map.\n\nFor each enumerated layer the `action` callback function is called and\nreceives a numeric argument, the layer number.\n\nThe enumeration is interrupted if the callback function returns `false`;\nany other return value is ignored.\n\nIn case the enumeration is interrupted, `true` is returned by the\n`forEachLayer` method, otherwise `false` is returned.",
            "itemtype": "method",
            "name": "forEachLayer",
            "params": [
                {
                    "name": "action",
                    "description": "A user-defined callback function that gets\ncalled for each enumerated layer.\n\nThe function receives one argument, the layer number.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the `action` callback function returned\n`false`, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 166,
            "description": "Enumerates the tiles currently in the map.\n\nFor each enumerated tile the `action` callback function is called and\nreceives three integer arguments, the `i`, `j` and `k` coordinates of the\ntile. The tile itself can then be retrieved as a `TileMap.Tile` object by\ncalling the `TileMap.getAt` method.\n\nThe enumeration is interrupted if the callback function returns `false`;\nany other return value is ignored.\n\nIn case the enumeration is interrupted, `true` is returned by the\n`forEachTile` method, otherwise `false` is returned.",
            "itemtype": "method",
            "name": "forEachTile",
            "params": [
                {
                    "name": "action",
                    "description": "A user-defined callback function that gets\ncalled for each enumerated tile.\n\nThe function receives three integer arguments: the `i`, `j` and `k`\ncoordinates of the tile, respectively.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the `action` callback function returned\n`false`, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 198,
            "description": "Enumerates the tiles in the specified layer of the map.\n\nFor each enumerated tile the `action` callback function is called and\nreceives two integer arguments, the `i` and `j` coordinates of the tile.\nThe tile itself can then be retrieved as a `TileMap.Tile` object by\ncalling the `TileMap.getAt` method.\n\nAn exception is thrown if the `k` argument does not represent a valid\nlayer of the map. This includes empty layers: if a tile map contains\ntiles at layers `0` and `2` but none at layer `1` you cannot specify `1`\nfor the `k` argument because the map does not contain the layer `1`.\n\nThe enumeration is interrupted if the callback function returns `false`;\nany other return value is ignored.\n\nIn case the enumeration is interrupted, `true` is returned by the\n`forEachTileInLayer` method, otherwise `false` is returned.",
            "itemtype": "method",
            "name": "forEachTileInLayer",
            "params": [
                {
                    "name": "k",
                    "description": "The layer number.",
                    "type": "Number"
                },
                {
                    "name": "action",
                    "description": "A user-defined callback function that gets\ncalled for each enumerated tile.\n\nThe function receives two integer arguments: the `i` and `j` coordinates\nof the tile, respectively.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the `action` callback function returned\n`false`, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 271,
            "description": "TODO",
            "itemtype": "method",
            "name": "getTileIds",
            "params": [
                {
                    "name": "properties",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Number[]"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 290,
            "description": "TODO",
            "itemtype": "method",
            "name": "getTileId",
            "params": [
                {
                    "name": "properties",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Number"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 299,
            "description": "Returns a `Tile` object that describes the requested tile.\n\nA tile can be identified either by ID or filtering properties; TODO\n\nThis method throws an exception if the ID is not valid, i.e. it is not\npresent in the JSON data output by the Canvace Development Environment.",
            "itemtype": "method",
            "name": "getTile",
            "params": [
                {
                    "name": "idOrProperties",
                    "description": "A tile ID or filtering properties object.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "A `Tile` object describing the requested\ntile.",
                "type": "Canvace.TileMap.Tile"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 327,
            "description": "TODO",
            "itemtype": "method",
            "name": "getTiles",
            "params": [
                {
                    "name": "properties",
                    "description": "TODO",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Canvace.TileMap.Tile[]"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 345,
            "description": "Returns the ID of the tile located at the specified `(i, j, k)` position\nof the map, or `false` if no tile is located at that position.\n\nIn case a multiple tile is located at the specified position, its ID is\nreturned only if the specified position identifies its reference cell;\notherwise `false` is returned.\n\nTo be aware of the parts of possible multiple tiles use the\n{{#crossLink \"Canvace.TileMap.getAt2\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "getAt",
            "params": [
                {
                    "name": "i",
                    "description": "An integer I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "An integer J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "An integer K coordinate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The requested tile ID, or `false` if no tile is found.",
                "type": "Number"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 371,
            "description": "Returns the ID of the tile located at the specified `(i, j, k)` position\nof the map, or `false` if no tile is located at that position.\n\nIn case a multiple tile is located at the specified position, its ID is\nreturned only if the specified position identifies its reference cell;\notherwise this method returns an object describing the tile and\ncontaining three fields: an `id` field specifying the tile ID and two `i`\nand `j` fields representing the coordinates of its reference cell in the\nsame layer.\n\nTo be aware of the parts of possible multiple tiles use the\n{{#crossLink \"Canvace.TileMap.getAt2\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "getAt2",
            "params": [
                {
                    "name": "i",
                    "description": "An integer I coordinate.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "An integer J coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "An integer K coordinate.",
                    "type": "Number"
                },
                {
                    "name": "alwaysId",
                    "description": "TODO",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The requested single tile ID, an object describing a\nmultiple tile or `false` if no tile is found. Use the `typeof` operator\nto distinguish between the two cases: a tile ID is always a number.",
                "type": "Mixed"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 415,
            "description": "Puts the specified tile in the specified position of the map. If a\nmutable tile is already present in that position, it is first removed. If\na non-mutable tile is present, the operation fails.\n\nA boolean value is returned indicating whether the operation succeeded or\nnot.",
            "itemtype": "method",
            "name": "putAt",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate of the map cell.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate of the map cell.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate of the map cell.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The new tile's ID.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "`true` if the specified tile was successfully placed at\nthe specified position, `false` if that position is already occupied by a\nnon-mutable tile.",
                "type": "Boolean"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 490,
            "description": "This method uses the `findPath` method of the\n{{#crossLink \"Canvace.Astar\"}}{{/crossLink}} class to compute a suitable\npath from the starting node to the destination node.\n\nThe only difference between this method and the `findPath` method of the\n{{#crossLink \"Canvace.Astar\"}}{{/crossLink}} class is the way the\ncomputed path is returned to the caller.",
            "itemtype": "method",
            "name": "findPath",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate of the requested node.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate of the requested node.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The number of the layer containing both the requested\nand the target node.",
                    "type": "Number"
                },
                {
                    "name": "i1",
                    "description": "The I coordinate of the target node.",
                    "type": "Number"
                },
                {
                    "name": "j1",
                    "description": "The J coordinate of the target node.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array of objects containing the `i` and `j`\ncoordinates of the nodes in the computed path, or `null` if no path can\nbe found. The starting node is **not** included.",
                "type": "Object[]"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 526,
            "description": "Constructs an object that satisfies the `Astar.Node` requirements and\nrepresents a tile of the map as a node of a graph. The returned object\nallows to traverse a graph where each node represents a solid tile and\neach edge allows to walk from a tile to another adjacent tile.\n\nThe returned graph is characterized by a _target node_ and each node also\nprovides a heuristic estimate of the distance between the target node and\nitself. This makes the graph usable with the `Astar` class.\n\nThe target node is the tile identified by the coordinates `i1`, `j1` and\n`k`.",
            "itemtype": "method",
            "name": "getGraphNode",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate of the requested node.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate of the requested node.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The number of the layer containing both the requested\nand the target node.",
                    "type": "Number"
                },
                {
                    "name": "i1",
                    "description": "The I coordinate of the target node.",
                    "type": "Number"
                },
                {
                    "name": "j1",
                    "description": "The J coordinate of the target node.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A node object that satisfies the\n`Astar.Node` requirements and can be passed to the `Astar.findPath`\nmethod.",
                "type": "Canvace.Astar.Node"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 599,
            "description": "Detects collisions between a rectangular area and solid tiles of a\nspecified map layer.\n\nA vector is returned indicating two I and J values that must be added to\nthe coordinates of the rectangular area in order to resume a regular\nconfiguration where the area does not collide with the tiles.\n\nIn case there is not any collision, the returned vector is `(0, 0)`.\n\nThe rectangular area is specified by the `i`, `j`, `di` and `dj`\narguments.\n\nThe implementation of this method assumes the rectangular area represents\na moving entity (though not necessarily a Canvace entity). The collision\nalgorithm assumes the moving entity cannot have compenetrated a tile\nalong the I or J axis more than specified amounts `Di` and `Dj`,\nrespectively; this is necessary in order to obtain a functional physics\nalgorithm.\n\nThis method can be used to implement in-layer, bounding box based, entity\nvs. tiles collisions. If the rectangular area represents the bounding box\nof an entity, its origin's `i` and `j` coordinates can be obtained using\nthe `Stage.Instance.getPosition` method, while the `di` and `dj` span\nvalues are usually per-entity constant and must be arbitrarily determined\nby the developer.\n\nIf the rectangular area actually is the bounding box of a Canvace entity,\nyou can specify the distance the entity has gone along the I and J axes\nsince the last step as values for the `Di` and `Dj` arguments; you can do\nthat by caching the values of the `i` and `j` components of the entity's\nposition and subtracting them to their respective values of the current\nposition at each step. This is actually what the `testTileCollision`\nmethod of the `Stage.Instance` class does.",
            "itemtype": "method",
            "name": "rectangleCollision",
            "params": [
                {
                    "name": "k",
                    "description": "The number of the layer containing the tiles against\nwhich the collision must be tested.",
                    "type": "Number"
                },
                {
                    "name": "i",
                    "description": "The I coordinate of the origin of the rectangular area.\nThis may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate of the origin of the rectangular area.\nThis may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "di",
                    "description": "The span of the rectangular area along the I axis.\nThis may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "dj",
                    "description": "The span of the rectangular area along the J axis.\nThis may be a real number.",
                    "type": "Number"
                },
                {
                    "name": "Di",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "Dj",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "collides",
                    "description": "An optional user-defined callback function\nthat is invoked by the `rectangleCollision` method for every tile that\ncollides with the specified rectangle.\n\nThe function receives two arguments, the tile's solid flag and its\nproperties, and must return a boolean value indicating whether the tile\nmust be taken into account as a colliding tile. If the function returns\n`false` the tile is _not_ taken into account.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "An object containing two number fields, `i` and `j`,\nspecifying the I and J components of the computed vector.",
                "type": "Object"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/TileMap.js",
            "line": 757,
            "description": "TODO",
            "itemtype": "method",
            "name": "translatePath",
            "static": 1,
            "params": [
                {
                    "name": "i",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "path",
                    "description": "TODO",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Object[]"
            },
            "class": "Canvace.TileMap",
            "module": "Canvace"
        },
        {
            "file": "src/Timing.js",
            "line": 30,
            "description": "This method returns a timestamp using `window.performance.now()`, if\navailable, or `Date.now()` otherwise.",
            "itemtype": "method",
            "name": "now",
            "return": {
                "description": "A number indicating a timestamp in milliseconds.",
                "type": "Number"
            },
            "class": "Canvace.Timing",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 65,
            "description": "Computes the projected `x`, `y` and `z` coordinates of an element by\nright-multiplying an `(i, j, k)` vector by the projection matrix.\n\nNote that the computed `x` and `y` coordinates do not correspond to the\nactual on-screen coordinates because they vary depending on the X and Y\noffsets of the specific element.\n\nThis method only calculates a \"generic\" projection, but the\n`projectElement` is more useful in that it calculates the actual\ncoordinates.\n\nThe computed coordinates are returned as an array containing three\nelements, respectively X, Y and Z.",
            "itemtype": "method",
            "name": "project",
            "params": [
                {
                    "name": "i",
                    "description": "The I coordinate to project.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate to project.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate to project.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array containing the calculated `x`, `y` and `z`,\nrespectively.",
                "type": "Array"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 95,
            "description": "Computes the projected `x`, `y` and `z` coordinates of the specified\nelement by right-multiplying an `(i, j, k)` vector by the projection\nmatrix and adding the X and Y offsets of the element.\n\nThis method does not take into account the viewport offset (`drag` calls\nwill not affect the result of `projectElement`).\n\nThe computed coordinates are returned as an array containing three\nelements, respectively X, Y and Z.",
            "itemtype": "method",
            "name": "projectElement",
            "params": [
                {
                    "name": "element",
                    "description": "A tile or entity descriptor. This object must\nhave the same layout as tile and entity descriptors documented in\nCanvace's Output Format Guide. You can specify tiles and entities you\nfind in JSON data output by the Canvace Development Environment.",
                    "type": "Object"
                },
                {
                    "name": "i",
                    "description": "The I coordinate to project.",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "The J coordinate to project.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate to project.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array containing the calculated `x`, `y` and `z`,\nrespectively.",
                "type": "Array"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 125,
            "description": "Inverts the specified `x` and `y` projected coordinates returning the\ncorresponding original `(i, j, k)` coordinates assuming that the\nprojected point is located at the specified `k` coordinate in the\noriginal 3D space. This means that the `k` value in the returned\n`(i, j, k)` vector corresponds to the specified `k` value.\n\nThis method is useful for implementing picking algorithms.\n\nThe computed `(i, j, k)` vector is returned as an array of three\nelements, the `i`, `j` and `k` values respectively.",
            "itemtype": "method",
            "name": "unproject",
            "params": [
                {
                    "name": "x",
                    "description": "The projected X value.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The projected Y value.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate where the projected point is assumed\nto be.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array containing three elements, the `i`, `j` and `k`\nvalues, respectively.",
                "type": "Array"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 152,
            "description": "Inverts the specified `x` and `y` projected coordinates returning the\ninteger `(i, j, k)` coordinates of the cell where the projected point is\nlocated, assuming they are located at layer `k`. The specified `k` value\nis simply returned as is in the resulting `(i, j, k)` vector.\n\nThe resulting vector is returned as an object containing three integer\nfields: `i`, `j` and `k`.\n\nThe only difference between this method and `unproject` is that the\nformer always returns integer values (resulting from rounding) while the\nlatter may return real values.",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "x",
                    "description": "The projected point's X coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The projected point's Y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "The K coordinate in the original 3D space where the\nprojected point is assumed to be located.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an object containing three properties, `i`, `j` and `k`.",
                "type": "Object"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 183,
            "description": "Returns the viewport's origin as an object containing two properties, `x`\nand `y`.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "The viewport's origin as an object containing two\nproperties, `x` and `y`.",
                "type": "Object"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 203,
            "description": "Returns the viewport width.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "The viewport width.",
                "type": "Number"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 213,
            "description": "Returns the viewport height.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "The viewport height.",
                "type": "Number"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 225,
            "description": "Drags the viewport by the specified `dx` and `dy` offsets.",
            "itemtype": "method",
            "name": "drag",
            "params": [
                {
                    "name": "dx",
                    "description": "The drag offset along the X axis.",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "The drag offset along the Y axis.",
                    "type": "Number"
                }
            ],
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 240,
            "description": "Drags the viewport so that the origin be located at the specified `x` and\n`y` coordinates.",
            "itemtype": "method",
            "name": "dragTo",
            "params": [
                {
                    "name": "x",
                    "description": "The new origin's X coordinate.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new origin's Y coordinate.",
                    "type": "Number"
                }
            ],
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 256,
            "description": "Register an event handler invoked every time the viewport's origin\nchanges. This happens because of `drag` and `dragTo` calls.\n\nMultiple handlers may be registered. A handler may be registered more\nthan once, in which case it gets called as many times as it was\nregistered.\n\nThis method returns a function that unregisters the registered handler.\nIf a handler was registered more than once, the returned function only\nremoves its own registration, while other instances of the handler stay\nregistered.",
            "itemtype": "method",
            "name": "onDrag",
            "params": [
                {
                    "name": "handler",
                    "description": "A function that is invoked every time the\nviewport is dragged. The function receives two arguments, `x0` and `y0`,\nrepresenting the new coordinates of the viewport's origin.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function that unregisters the handler. The returned\nfunction does not receive any arguments.",
                "type": "Function"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 280,
            "description": "TODO",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "i",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "di",
                    "description": "TODO",
                    "type": "Number"
                },
                {
                    "name": "dj",
                    "description": "TODO",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Boolean"
            },
            "class": "Canvace.View",
            "module": "Canvace"
        },
        {
            "file": "src/View.js",
            "line": 324,
            "description": "\"Ticks\" the synchronizer, which tries to move the view according to\nthe delay parameter so that the target entity fits into the target\narea.\n\nThis method is typically called from within the `tick` callback\nfunction of a `RenderLoop`.",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "target",
                    "description": "The entity instance to target.",
                    "type": "Canvace.Stage.Instance"
                }
            ],
            "class": "Canvace.View.Synchronizer",
            "module": "Canvace"
        },
        {
            "file": "src/Visibility.js",
            "line": 45,
            "description": "Tells if the browser supports the Page Visibility API.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "A value indicating whether such support is available.",
                "type": "Boolean"
            },
            "class": "Canvace.Visibility",
            "module": "Canvace"
        },
        {
            "file": "src/Visibility.js",
            "line": 55,
            "description": "Queries the visibility status of the document.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "A value indicating if the document is visible or not.\n  Defaults to the boolean `true` if the Page Visibility API is not\n  supported.",
                "type": "Boolean"
            },
            "class": "Canvace.Visibility",
            "module": "Canvace"
        },
        {
            "file": "src/Visibility.js",
            "line": 71,
            "description": "Registers an event listener for the `visibilitychange` event.\nThis method defaults to a no-operation if the Page Visibility API is not\nsupported.",
            "itemtype": "method",
            "name": "onChange",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to invoke when a\n  `visibilitychange` event is triggered.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A remover method which unregisters the event listener.",
                "type": "Function"
            },
            "class": "Canvace.Visibility",
            "module": "Canvace"
        },
        {
            "file": "src/Visibility.js",
            "line": 102,
            "description": "Adds an event listener for the \"visibility change\" event, if supported by the\nbrowser.",
            "itemtype": "method",
            "name": "onVisibilityChange",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to invoke when a\n  `visibilitychange` event is triggered.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A function which removes the event listener if the Page\n  Visibility API is supported, or the boolean `false` otherwise.",
                "type": "Mixed"
            },
            "class": "Canvace",
            "module": "Canvace"
        }
    ],
    "warnings": []
}